<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Knowledge Database</title><link>https://schoettkr.github.io/knowledge-database/</link><description>This is my personal knowledge database / blog.</description><atom:link href="https://schoettkr.github.io/knowledge-database/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:schoettkr@gmail.com"&gt;schoettkr&lt;/a&gt; </copyright><lastBuildDate>Sat, 08 Dec 2018 09:40:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Algos &amp; Programming - Lecture 18</title><link>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-18/</link><dc:creator>schoettkr</dc:creator><description>&lt;div id="outline-container-orgeb4d687" class="outline-2"&gt;
&lt;h2 id="orgeb4d687"&gt;Text Search&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeb4d687"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org289df66" class="outline-3"&gt;
&lt;h3 id="org289df66"&gt;Files&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org289df66"&gt;
&lt;p&gt;
Bigger volumes of data are usually not entered interactively but rather stored in &lt;b&gt;files&lt;/b&gt;. That's why we take a look at files first: A file is a set of data that logically belongs together and is treated as a unit. Files are usually acessed by a &lt;i&gt;file name&lt;/i&gt; that is known to the operating system and get stored on persistant data volumes (eg harddrives).
&lt;/p&gt;

&lt;p&gt;
Files can be organized differently. In the sense of the UNIX philosophy a file is a single set of bytes with an arbitrary size. Such data set resp sequence of bit is also called &lt;b&gt;bitstream&lt;/b&gt; resp. &lt;b&gt;bytestream&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The input/ouput of the C standard library is adapted to this concept so that there is no differentitation required between input from an input device or a file. To be more precise, the C standard library knows two types of file operations:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;low level file operations&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;files and file/data streams are identified via a &lt;b&gt;handle&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;specific to the particular operating system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;high level file operations&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;files and file/data streams are identified via a &lt;b&gt;file pointer&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;independant of the operating system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
For now we'll look at &lt;b&gt;high level file operations&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Files have to be &lt;b&gt;opened&lt;/b&gt;. When opening a file the management/administration information is created (Verwaltungsinformationen). There's a function in the standard library to open files &lt;code&gt;FILE* fopen(char* name, char* mode)&lt;/code&gt; which returns a pointer to the file management structure (Dateiverwaltungsstruktur) or NULL:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myFile.dat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
A file that is no longer needed should be closed and the management resources shoudl eb released. That is done via &lt;code&gt;int fclose(FILE* stream)&lt;/code&gt; which returns &lt;code&gt;0&lt;/code&gt; when the file was closed successfully.
&lt;/p&gt;

&lt;p&gt;
Here's a list of the possible file access modes which are passed to &lt;code&gt;fopen&lt;/code&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;"r"&lt;/code&gt; → &lt;b&gt;read&lt;/b&gt;: open file for input operations (reading from the file); the file must exist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"w"&lt;/code&gt; → &lt;b&gt;write&lt;/b&gt;: create an empty file for output operations (writing to a file); if a file with the same name already exists, its contents are discarded and the file is treated as a new empty file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"a"&lt;/code&gt; → &lt;b&gt;append&lt;/b&gt;: open file for output at the end of a file; output operations always write data at the end of the file, thus expanding it; repositioning operations (fseek, fsetpos, rewind) are ignored; the file is created if it does not exist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"r+"&lt;/code&gt; → &lt;b&gt;read/update&lt;/b&gt;: open a file for update (both for input and output); the file must exist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"w+"&lt;/code&gt; → &lt;b&gt;write/update&lt;/b&gt;: create an empty file and open it for update (both for input and output); if a file with the same name already exists its contents are discarded and the file is treated as a new empty file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"a+"&lt;/code&gt; → &lt;b&gt;append/update&lt;/b&gt;: open a file for update (both for input and output) with all output operations writing data at the end of the file; repositioning operations (fseek, fsetpos, rewind) affects the next input operations, but output operations move the position back to the end of file; the file is created if it does not exist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
With the &lt;i&gt;mode specifiers&lt;/i&gt; above files are opened as &lt;i&gt;text files&lt;/i&gt;. In order to open a file as a &lt;i&gt;binary file&lt;/i&gt; a &lt;code&gt;"b"&lt;/code&gt; character has to be included in the mode string.  This additional "b" character can either be appended at the end of the string (thus making the following compound modes: "rb", "wb", "ab", "r+b", "w+b", "a+b") or be inserted between the letter and the plus sign for the mixed modes ("rb+", "wb+", "ab+").
&lt;/p&gt;

&lt;p&gt;
For data input and output, C provides a collection of library functions. These functions enable the transfer of data between the C program and standard input/output devices. C always treats all input-output data, regardless of where they originate or where they go, as a stream of characters. 
The operating system makes the input and output devices available to a C program as if these devices were files. So, essentially, when a C program reads data from the keyboard, it is in effect reading from the file associated with the keyboard device. When a C program sends output data to the console, it is in effect writing to the file associated with the console device.
&lt;/p&gt;

&lt;p&gt;
A stream of characters or text stream, is a sequence of characters divided into lines. Each line consists of various characters followed by a newline character (\n). All input-output functions in C conform to this model.
&lt;/p&gt;

&lt;p&gt;
In order to be able to use the above mentioned input-output functions in your C program, you must begin each C program with a pre-processor directive to include these standard library functions.
&lt;/p&gt;

&lt;p&gt;
This can be done via &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
These are the most common/essential input-output functions:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Input&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;formatted&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;int fscanf(FILE*, char*, ...)&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;int fprintf(FILE*, char*, ...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;characters&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;int fgetc(FILE*)&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;int fputc(int, FILE*)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;strings&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;char* fgets(char*, int, FILE*)&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;int fputs(char*, FILE*)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;binary&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;size_t fread(void*, size_t, size_t, FILE*)&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;size_t fwrite(void*, size_t, size_t, FILE*)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org77ad400"&gt;&lt;/a&gt;Formatted data input &amp;amp; output&lt;br&gt;
&lt;div class="outline-text-5" id="text-org77ad400"&gt;
&lt;p&gt;
&lt;code&gt;fscanf&lt;/code&gt; and &lt;code&gt;fprintf&lt;/code&gt; work like &lt;code&gt;scanf&lt;/code&gt; and &lt;code&gt;printf&lt;/code&gt; but take a file pointer as an additional first parameter. To use &lt;code&gt;fscanf&lt;/code&gt; the file has (at least) to be opened in read mode ("r", "r+", "w+", "a+"). To use &lt;code&gt;fprintf&lt;/code&gt; the file has (at least) to be opened in write mode ("w", "a", "r+", "w+", "a+"). 
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"out.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hello world! The answer is %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org07c317f"&gt;&lt;/a&gt;Characterwise data input &amp;amp; output&lt;br&gt;
&lt;div class="outline-text-5" id="text-org07c317f"&gt;
&lt;p&gt;
The function &lt;code&gt;int fgetc(FILE* stream)&lt;/code&gt; returns the next character of a file &lt;code&gt;stream&lt;/code&gt; as an integer. When there's no character left, the constant &lt;code&gt;EOF&lt;/code&gt; (defined in &lt;code&gt;stdio.h&lt;/code&gt;) is returned (same thing when an error occurs). 
&lt;/p&gt;

&lt;p&gt;
The function &lt;code&gt;int fputc(int c, FILE* stream)&lt;/code&gt; writes the integer coded character &lt;code&gt;c&lt;/code&gt; into the file &lt;code&gt;stream&lt;/code&gt; and returns the number of written characters (= 1). In case of an error it returns &lt;code&gt;EOF&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org318e40c"&gt;&lt;/a&gt;String data input &amp;amp; output&lt;br&gt;
&lt;div class="outline-text-5" id="text-org318e40c"&gt;
&lt;p&gt;
The function &lt;code&gt;char* fgets(char restrict * str, int n, FILE* restrict stream)&lt;/code&gt; reads maximally &lt;code&gt;n-1&lt;/code&gt; characters from the file &lt;code&gt;stream&lt;/code&gt; into a character string that is pointed to by &lt;code&gt;str&lt;/code&gt;. The reading proccess ends with the end of the line/file or when an error occurs. When no error occurs &lt;code&gt;\0&lt;/code&gt; is appended to &lt;code&gt;str&lt;/code&gt; and the return value points to &lt;code&gt;str&lt;/code&gt; (and to &lt;code&gt;NULL&lt;/code&gt; if there was an error). Beware that it is the duty of the programmer to guarantee that &lt;code&gt;str&lt;/code&gt; points to an character array which has a size of at least &lt;code&gt;n&lt;/code&gt; characters.
&lt;/p&gt;

&lt;p&gt;
The function &lt;code&gt;int fputs(char* str, FILE* stream)&lt;/code&gt; writes the (zero-terminated) string &lt;code&gt;str&lt;/code&gt; into the file &lt;code&gt;stream&lt;/code&gt;. It returns a non-negative integer on success and &lt;code&gt;EOF&lt;/code&gt; in case of an error (old C versions used to return &lt;code&gt;0&lt;/code&gt; on success)
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org8d872f6"&gt;&lt;/a&gt;Binary data input &amp;amp; output&lt;br&gt;
&lt;div class="outline-text-5" id="text-org8d872f6"&gt;
&lt;p&gt;
The function &lt;code&gt;size_t fread(void* ptr, size_t size, size_t nitems, FILE* stream)&lt;/code&gt; reads &lt;code&gt;nitems&lt;/code&gt; of size &lt;code&gt;size&lt;/code&gt; from the file &lt;code&gt;stream&lt;/code&gt; and stores them at the address specified by &lt;code&gt;ptr&lt;/code&gt;. It then returns the count of successfully read items/elements (not bytes!). 
&lt;/p&gt;

&lt;p&gt;
The function &lt;code&gt;size_t fwrite(void* ptr, size_t size, size_t nitems, FILE* stream)&lt;/code&gt; writes &lt;code&gt;nitems&lt;/code&gt; from the address &lt;code&gt;ptr&lt;/code&gt; of size &lt;code&gt;size&lt;/code&gt; in the file &lt;code&gt;stream&lt;/code&gt; and also returns the count of successfully written elements/items (not bytes).
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;


&lt;li&gt;&lt;a id="org31cb6ba"&gt;&lt;/a&gt;Standard Data Streams&lt;br&gt;
&lt;div class="outline-text-5" id="text-org31cb6ba"&gt;
&lt;p&gt;
The standard input-output devices or the associated files or text streams, are referred to as:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;stdin&lt;/b&gt; - standard input file, normally connected to the keyboard&lt;/li&gt;
&lt;li&gt;&lt;b&gt;stdout&lt;/b&gt; - standard output file, normally connected to the screen/console&lt;/li&gt;
&lt;li&gt;&lt;b&gt;stderr&lt;/b&gt; - standard error display device file, normally connected to the screen/console&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt; don't need to be opened like other files/streams (and cannot be opened):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is usage data.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is status data.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div id="outline-container-org2dcd619" class="outline-4"&gt;
&lt;h4 id="org2dcd619"&gt;Manipulating the File Position Pointer&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2dcd619"&gt;
&lt;p&gt;
See: &lt;a href="https://stackoverflow.com/questions/39687795/what-is-file-position-pointer"&gt;https://stackoverflow.com/questions/39687795/what-is-file-position-pointer&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Usually files are treated as data stream, which are accessed &lt;b&gt;sequentally&lt;/b&gt;. In case of "real files" it is possible to deviate from this sequential access. The following functions may be used to do so:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;void rewind(FILE* stream)&lt;/code&gt; → move the read or write position in the file &lt;code&gt;stream&lt;/code&gt; back to the beginning of the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void fseek(FILE* stream, long offset, int whence)&lt;/code&gt; → moves the read or write position in the file &lt;code&gt;stream&lt;/code&gt; to a position which is &lt;code&gt;offset&lt;/code&gt; bytes shifted from &lt;code&gt;whence&lt;/code&gt; (von wo/woher)
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;whence&lt;/code&gt; shall be one of the following constants which are defined in &lt;code&gt;stdio.h&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;SEEK_SET&lt;/code&gt; = offset relative to the beginning of the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SEEK_CUR&lt;/code&gt; = offset relative to the current position in the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SEEK_END&lt;/code&gt; = offset relative to the end of the file&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long ftell(FILE* stream)&lt;/code&gt; → may be used to get the current position in the file relative to the beginning of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Slides 17-19 provide code examples for reading/writing a file.
&lt;/p&gt;

&lt;p&gt;
A few other interesting functions in regards to files are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;int feof(FILE* stream)&lt;/code&gt; returns a value ≠ 0 when at the end of the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int ferror(FILE* stream)&lt;/code&gt; returns a value ≠ 0 when an file error has occured before&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int flush(FILE* stream)&lt;/code&gt; forces a physical write (emptying the cache)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int remove(char* name)&lt;/code&gt; deletes the file with a name of &lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org521016c" class="outline-4"&gt;
&lt;h4 id="org521016c"&gt;Files in Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org521016c"&gt;
&lt;p&gt;
F21
A file is a data type in Python. A data variable is created via &lt;code&gt;f = open(filename[, mode[, bufsize]])&lt;/code&gt; .
The possible modes are a superset of the modes we know from C and with &lt;code&gt;bufsize&lt;/code&gt; the cache size for the file can be set.
This is the Python 3 &lt;a href="https://docs.python.org/3/library/functions.html#open"&gt;documentation&lt;/a&gt; for &lt;code&gt;open&lt;/code&gt; (which looks kinda different than the slides).
&lt;/p&gt;

&lt;p&gt;
Here are a few common file operations in Python (&lt;code&gt;file&lt;/code&gt; be a data variable):
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;S = file.read()&lt;/code&gt; reads the whole file into a single string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S = file.read(N)&lt;/code&gt; reads &lt;code&gt;N&lt;/code&gt; bytes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S = file.readline()&lt;/code&gt; reads the next line (until new line char)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L = file.readlines()&lt;/code&gt; reads the whole file as a list of line strings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file.write(S)&lt;/code&gt; writes the string &lt;code&gt;S&lt;/code&gt; into the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file.writeLines(L)&lt;/code&gt; writes all strings in a list &lt;code&gt;L&lt;/code&gt; into the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file.close()&lt;/code&gt; closes the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Using iterations it is easy to work with a whole file in Python:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And Python provides more modules for file manipulations
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;module &lt;code&gt;os&lt;/code&gt; for low level&lt;/li&gt;
&lt;li&gt;module &lt;code&gt;shelve&lt;/code&gt; and &lt;code&gt;pickle&lt;/code&gt; for high level storage of complex objects&lt;/li&gt;
&lt;li&gt;module &lt;code&gt;dbm&lt;/code&gt; and &lt;code&gt;anydbm&lt;/code&gt; for database interfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgd886a42" class="outline-3"&gt;
&lt;h3 id="orgd886a42"&gt;Simple Search&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd886a42"&gt;
&lt;p&gt;
Now with our newly acquired knowledge about files we can start looking into text search.
&lt;/p&gt;

&lt;p&gt;
Our program should take the following parameters:
&lt;code&gt;./search &amp;lt;searchText&amp;gt; &amp;lt;fileName&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
And if the search text is found in the file, then the "surrounding" in which it was found should be returned, while the search text is wrapped in brackets to accentuate, eg
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./search &lt;span class="s2"&gt;"example"&lt;/span&gt; lorem.txt

ullamcoprer subsciptit nisl ut aliqup &lt;span class="o"&gt;[&lt;/span&gt;example&lt;span class="o"&gt;]&lt;/span&gt; ea commodano
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
One of the first problems we encounter is that we don't know the size/length of neither a line nor the whole file. Here a few solution approaches:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Approach 1: define a line buffer that is "sufficiently large" for all cases → not safe and not a good approach in general&lt;/li&gt;
&lt;li&gt;Approach 2: don't always read in whole lines → complicates the search if the search text is between two read-in blocks&lt;/li&gt;
&lt;li&gt;Approach 3: determine the file size, dynamically reserve space and read in the whole file → requires a lot of memory storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We go with approach 3 since it also offers speed advantages.
&lt;/p&gt;

&lt;p&gt;
So let's determine the file size first - how do we do that?
The unix C function &lt;code&gt;int stat(char* name, struct stat* buf)&lt;/code&gt; which writes informations about the file &lt;code&gt;name&lt;/code&gt; into &lt;code&gt;buf&lt;/code&gt; is not compatible so we don't use it and instead rely on using a combination of functions from the standard library:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;filesize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// offset the file position pointer by 0 bytes relative to the eof&lt;/span&gt;
  &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// get the current position relative to the beginning of the file&lt;/span&gt;
  &lt;span class="n"&gt;rewind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// move the file position pointer back to the beginning of the file&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
By the way &lt;code&gt;size_t&lt;/code&gt; is an OS dependant unsigned integer type that can store the maximum &lt;i&gt;size&lt;/i&gt; of a theoretically possible object of any type (including array) and which is commonly used for array indexing and loop counting (Programs that use other types, such as &lt;code&gt;unsigned int&lt;/code&gt;, for array indexing may fail on, e.g. 64-bit systems when the index exceeds &lt;code&gt;UINT_MAX&lt;/code&gt; or if it relies on 32-bit modular arithmetic.).
&lt;/p&gt;

&lt;p&gt;
And this will be our main function which uses our &lt;code&gt;filesize&lt;/code&gt; function amongst other things:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// wrong number of params&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// open file&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// cant open file&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filesize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/* allocate size+1 (for terminating 0) memory for our file buffer */&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// out of memory&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* read one element of size 'size' into our text buffer (the whole file) */&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// can't read file&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// set the terminating 0;&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// yet to implement!&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;presentResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// dito!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This main function does the necessary preparations for the actual search. Besides the search function we also need a function for the presentation/output. We want to output 20 characters before and after the search string:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;presentResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// pos is the start of match position, str is the file buffer and pattern our search text&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prelen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// output beginning&lt;/span&gt;

  &lt;span class="n"&gt;prelen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// beginning of match&lt;/span&gt;
  &lt;span class="n"&gt;patternLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// yet to implement!&lt;/span&gt;

  &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;patternLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%.*s[%s]%.20s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prelen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As seen in the code listing above we also need a function to determine the length of a string. There's an function for that in the standard library but we'll use our own:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now we can finally turn our attention to the actual search algorithm. The idea is that we want to test for each position in the text &lt;code&gt;str&lt;/code&gt;, if the searchstring &lt;code&gt;p&lt;/code&gt; begins there. If that is the case, then we want to test the next character and so on..
&lt;/p&gt;

&lt;p&gt;
Here's the pseudocode:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// str is file/text buffer and p is search string&lt;/span&gt;
&lt;span class="nl"&gt;Require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;Ensure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;appearance&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;

&lt;span class="n"&gt;procedure&lt;/span&gt; &lt;span class="n"&gt;SIMPLE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SEARCH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="c1"&gt;// found 1st occ of search string&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
      &lt;span class="n"&gt;endif&lt;/span&gt;
      &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"not found"&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;procedure&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
The actual C implemenation is where we'll continue in the next lecture (19), have a nice day (◕‿‿◕)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>A&amp;P</category><category>university</category><guid>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-18/</guid><pubDate>Thu, 06 Dec 2018 23:00:00 GMT</pubDate></item><item><title>Algos &amp; Programming - Lecture 17</title><link>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-17/</link><dc:creator>schoettkr</dc:creator><description>&lt;div id="outline-container-orged82e2d" class="outline-2"&gt;
&lt;h2 id="orged82e2d"&gt;Recursion and Backtracking&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orged82e2d"&gt;
&lt;p&gt;
Recursion was already covered in previous lectures so you can find additional informations in those blog posts. Now we want to discuss one difference between &lt;i&gt;loops&lt;/i&gt; and &lt;i&gt;recursion&lt;/i&gt; and therefore we turn our attention to the datastructure &lt;b&gt;stack&lt;/b&gt; which is used in many CPU's.
The stack is a container for holding data and there are two operations associated with it:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;push&lt;/b&gt; → &lt;code&gt;push(D, S)&lt;/code&gt; adds a data element &lt;code&gt;D&lt;/code&gt; on top of the stack &lt;code&gt;S&lt;/code&gt; (and 'overlays' the other elements in S)
&lt;ul class="org-ul"&gt;
&lt;li&gt;usually returns the modified stack &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;pop&lt;/b&gt; → &lt;code&gt;pop(S)&lt;/code&gt; the topmost and only visible element in &lt;code&gt;S&lt;/code&gt; get's removed from the top of the stack and allows access to next element below it
&lt;ul class="org-ul"&gt;
&lt;li&gt;usually returns the removed element &lt;code&gt;D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
A simple hardware implementation is achieved via a &lt;i&gt;stack pointer&lt;/i&gt; that always points to the top of the stack (the topmost element). &lt;a href="http://cryptroix.com/2016/10/16/journey-to-the-stack/"&gt;Here's&lt;/a&gt; an in depth explanation and a shorter post can be found &lt;a href="https://learn1.open.ac.uk/mod/oublog/viewpost.php?post=162710"&gt;here&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/call-stack.png" alt="nil"&gt;
Cite from the second link:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
When a call is made one method of passing arguments to a function is to push the data onto the stack along with the address of the program statement execution must return to when the function has completed its work. This stack is referred to as the &lt;b&gt;call stack&lt;/b&gt; or sometimes the machine stack. A specific CPU register, the &lt;b&gt;stack pointer (SP)&lt;/b&gt;, may be provided to manage it. In this case a call function instruction says: push the return onto the stack and jump to the function address, making that part of the pushing automatic.
&lt;/p&gt;

&lt;p&gt;
In the majority of cases the call stack grows downwards in memory giving local variables a positive offset from the SP. The SP points to the last element put on the stack not the next free space so it is decremented down before data is pushed on. It is usual to discuss the depth of function calls meaning the number of calls made before a return starts the climb back up to calls higher in the calling hierarchy. An upside down stack fits well with this view: 
&lt;/p&gt;

&lt;p&gt;
When called the first action function code takes is to push the old value of another CPU register, the &lt;b&gt;frame pointer (FP)&lt;/b&gt;, onto the stack. The current value of the SP is then stored in the FP allowing modification of the SP to make space on the stack for any additional local variables the function has. 
&lt;/p&gt;

&lt;p&gt;
On a return from a function the value of the SP is restored from the FP and the FP gets its old value back, popped off the stack. Lastly, a return instruction in the machine code tells the CPU to send execution back to the instruction address stored on the stack by the call and currently referenced by the SP. Thus the FP and the SP work together to walk up and down the stack. 
&lt;/p&gt;

&lt;p&gt;
The blocks of memory on the call stack for each individual function call are &lt;b&gt;stack frames&lt;/b&gt;.  Function local variables that cannot be held in registers because they are too big to fit or because those registers may be used by the callee when that function calls another function are put on the stack. Large return items can be passed back on the stack but more usually the return or a reference to it is passed in a CPU register. Thus the availability of this storage space makes nested function calls possible.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;div id="outline-container-org05f5507" class="outline-4"&gt;
&lt;h4 id="org05f5507"&gt;Recursion vs Iteration&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org05f5507"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Recursion&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Iteration&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;recursive calls of a subroutine(Unterprogramm)&lt;/td&gt;
&lt;td class="org-left"&gt;execution of a set of instructions of an iteration step&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;parameters of the subroutine are modified and tested for a break condition&lt;/td&gt;
&lt;td class="org-left"&gt;iterations usually limited via counter variable or a set&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;processed elements are stored implicitly on the stack (subroutine params)&lt;/td&gt;
&lt;td class="org-left"&gt;processed elements elements have to be stored explicitly&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;access to elements is limited to current component in the active subroutine&lt;/td&gt;
&lt;td class="org-left"&gt;access to elements is arbitrary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;corresponds to the function model&lt;/td&gt;
&lt;td class="org-left"&gt;corresponds to the state model&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd8f762a" class="outline-3"&gt;
&lt;h3 id="orgd8f762a"&gt;Design of Recursive Algorithms&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd8f762a"&gt;
&lt;p&gt;
There are at least two cases which have to be handled in every recursive algorithm
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;exit/break from the recursion&lt;/li&gt;
&lt;li&gt;recursive call&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In general there are two approache to craft recursive algorithms:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;abstraction&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;drafting of a specific solution to a specific problem instances → draft more solutions and make use of the ones already existing → recognize similarities → encapsulate/summarize those to a universal solution (&lt;b&gt;abstraction&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;leap of faith&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;assumption that the function/procedure is already working and use that for a smaller subproblem&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org53e9706" class="outline-4"&gt;
&lt;h4 id="org53e9706"&gt;Fibonacci Numbers&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org53e9706"&gt;
&lt;p&gt;
We already got to know the Fibonacci Numbers previously:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Computes the n-th fibonacci number&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;Regularity&lt;/b&gt; (Regelmäßigkeit):&lt;br&gt;
We can recognize that the next element in the fibonacci sequence is the sum of the previous both fibonacci numbers. So \(a_{n+2} = a_n  + a_{n+1}\). 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Defaults&lt;/b&gt; (Standardfolge):&lt;br&gt;
We set a&lt;sub&gt;0&lt;/sub&gt; = 0 and a&lt;sub&gt;1&lt;/sub&gt; = 1 and get the following sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, …
&lt;/p&gt;

&lt;p&gt;
However the fibonacci sequence is an example where recursion should not be used since the call stack will get pretty large and it is totally solvable with iterations.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Computes the n-th fibonacci number&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fnum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;fnum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;fnum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fnum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fnum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fnum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fnum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fnum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The complexity of this solution with a loop is \(\Theta(n)\), while the complexity of the solution with recursion was \(\Theta(c^n)\) with c &amp;gt; 1.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org496eb95" class="outline-4"&gt;
&lt;h4 id="org496eb95"&gt;Towers of Hanoi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org496eb95"&gt;
&lt;p&gt;
Now we'll turn our attention to a problem which can be well represented with recursion to demonstrate the principle of solutions. The &lt;i&gt;tower of hanoi&lt;/i&gt; is a mathematical game/puzzle consisting of three rods and a number of differently sized disk on one rod which can slide onto any rod under the following rules:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;only one disk can be moved at a time&lt;/li&gt;
&lt;li&gt;each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or an empty rod&lt;/li&gt;
&lt;li&gt;no larger disk may be placed on top of a smaller disk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is the pseudo code to solve the towers of hanoi:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tower&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ensure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tower&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;obey&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;procedure&lt;/span&gt; &lt;span class="n"&gt;MOVE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;TOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;goal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
  &lt;span class="n"&gt;MOVE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;TOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux_place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// auxiliary place/Hilfsplatz&lt;/span&gt;
  &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;last_ring&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;goal&lt;/span&gt;
  &lt;span class="n"&gt;MOVE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;TOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;goal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;procedure&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Move part of the tower with height n-1 from the start rod to the auxiliary rod (via the goal rod)&lt;/li&gt;
&lt;li&gt;Move the last/bottom disk from the start rod to the goal rod&lt;/li&gt;
&lt;li&gt;Move part of the tower with height n-1 from the auxiliary rod to the goal road (via the start rod)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
→ The minimal number of moves required to solve a Tower of Hanoi puzzle is 2&lt;sup&gt;n&lt;/sup&gt; - 1, where n is the number of disks.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge8dbbac" class="outline-3"&gt;
&lt;h3 id="orge8dbbac"&gt;Backtracking&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge8dbbac"&gt;
&lt;p&gt;
To illustrate an use case for &lt;i&gt;backtracking&lt;/i&gt; we'll turn our attention to the &lt;i&gt;Eight Queens Puzzle&lt;/i&gt; (Damenproblem), which is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens on an n×n chessboard, for which solutions exist for all natural numbers n with the exception of n=2 and n=3.
&lt;/p&gt;

&lt;p&gt;
A general algorithmic approach to get a solution could look like this:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Put a queen in the the first row and first column&lt;/li&gt;
&lt;li&gt;Put another quuen in the next row and in the first column&lt;/li&gt;
&lt;li&gt;Move the the second queen right until she's in an allowed position (not possible to be attacked)&lt;/li&gt;
&lt;li&gt;Repeat from Step 2 until:
&lt;ul class="org-ul"&gt;
&lt;li&gt;all 8 Queens are placed → Solution&lt;/li&gt;
&lt;li&gt;no valid field can be found in the row for a queen → if this is the case then the &lt;i&gt;previous&lt;/i&gt; queen is treated as invalid as well so that that one is moved right as well (when there is no valid position for the previous queen, then the queen previous to the previous one will be moved in search for a new valid place further to the right and so on…)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
This approach where a partial solution is discarded to continue with a previous partial solution is called &lt;b&gt;backtracking&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
From wikipedia: 
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons a candidate ("backtracks") as soon as it determines that the candidate cannot possibly be completed to a valid solution.
&lt;/p&gt;

&lt;p&gt;
The classic textbook example of the use of backtracking is the eight queens puzzle, that asks for all arrangements of eight chess queens on a standard chessboard so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of k queens in the first k rows of the board, all in different rows and columns. Any partial solution that contains two mutually attacking queens can be abandoned.
&lt;/p&gt;

&lt;p&gt;
Backtracking can be applied only for problems which admit the concept of a "partial candidate solution" and a relatively quick test of whether it can possibly be completed to a valid solution. It is useless, for example, for locating a given value in an unordered table. When it is applicable, however, backtracking is often much faster than brute force enumeration of all complete candidates, since it can eliminate a large number of candidates with a single test.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
If the backtracking has to be done until before the first queen then there is no solution. Backtracking is often used together with recursion but is however an indepent principle.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/backtracking.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/backtracking-2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The above solution is not the only one. If there's a need for more (or all) solutions, they have to be saved and then backtracking needs to be triggered.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Look at chapter 9 slides 31f. for a pseudo code and C implementation of the 8x8 queens problem&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>A&amp;P</category><category>university</category><guid>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-17/</guid><pubDate>Sun, 02 Dec 2018 23:00:00 GMT</pubDate></item><item><title>Computer Science I - Lecture 08</title><link>https://schoettkr.github.io/knowledge-database/posts/computer_science_I/cs-I-08/</link><dc:creator>schoettkr</dc:creator><description>&lt;p&gt;
&lt;b&gt;Disclaimer:&lt;/b&gt; &lt;i&gt;I was not able to attend this and next weeks lectures that take place on friday because I am required to attend some course at another university in another city. That means that the blog posts 7th and 8th Computer Science I lecture and the blog posts to the 14th and 16th Algorithms &amp;amp; Programming lecture is not supplemented by the notes I usually take during the lecture. Also the slides that I cover in each post may be a bit off from what was actually covered (especially in CS01 because I "guess" what we covered, while for A&amp;amp;P a classmate hands me the covered slides)&lt;/i&gt;
&lt;/p&gt;

&lt;div id="outline-container-org7d771de" class="outline-2"&gt;
&lt;h2 id="org7d771de"&gt;Program Structure&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7d771de"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org55141c0" class="outline-3"&gt;
&lt;h3 id="org55141c0"&gt;Constants&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org55141c0"&gt;
&lt;p&gt;
Similar to variable declaration it is possible to declare &lt;i&gt;constants&lt;/i&gt;. This is achieved by prepending the keyword "const" before the type eg &lt;code&gt;const float PI = 3.14&lt;/code&gt;. You might also encounter something like &lt;code&gt;#define PI 3.14&lt;/code&gt; which is an old way of declaring constants via a preprocessor directive and not encouraged anymore.
&lt;/p&gt;

&lt;p&gt;
This is a recommended outline of the program structure:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Include Directives (System)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Include Directives (Private/Local)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Constant Declarations&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Type- and Class Declarations&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Variable Declarations&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Functions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
But this is not set in stone and isn't mandatory to follow.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org472af39" class="outline-3"&gt;
&lt;h3 id="org472af39"&gt;Scope&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org472af39"&gt;
&lt;p&gt;
Variables that are declared
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;outside of any functions are visible/present/accessible until the end of the source code&lt;/li&gt;
&lt;li&gt;inside of functions (or as function parameters) are visible/present/accessible until the end of that function&lt;/li&gt;
&lt;li&gt;inside of blocks (&lt;code&gt;{...}&lt;/code&gt;) are visible/present/accessible until the end of that block&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// outside of any function&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// inside of f1&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The two &lt;code&gt;x&lt;/code&gt;'s in the code above have their own, different places in memory.
&lt;/p&gt;

&lt;p&gt;
Beware that while it is possible to declare the same name in different scopes is possible, it is not really recommended.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgac15c67" class="outline-3"&gt;
&lt;h3 id="orgac15c67"&gt;Type Compability&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgac15c67"&gt;
&lt;p&gt;
It is possible to convert types. This should happen when there is a good reason for it and you know what you're doing (eg that the semantic makes sense and the types are compatible). To do so you write the type you want to convert to and wrap the variable you want to convert in parentheses, so it looks like a function call &lt;code&gt;x = int(y);&lt;/code&gt;. The old form &lt;code&gt;x = (int)y;&lt;/code&gt; should not be used anymore.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6aa1928" class="outline-3"&gt;
&lt;h3 id="org6aa1928"&gt;Namespaces&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6aa1928"&gt;
&lt;p&gt;
Namespaces allow us to group named entities that otherwise would have global scope into narrower scopes, giving them namespace scope. This allows organizing the elements of programs into different logical scopes referred to by names. Namespace is a feature added in C++ and not present in C. A namespace is a declarative region that provides a scope to the identifiers (names of the types, function, variables etc) inside it. Multiple namespace blocks with the same name are allowed. All declarations within those blocks are declared in the named scope. 
&lt;/p&gt;

&lt;p&gt;
A namespace definition begins with the keyword namespace followed by the namespace name as follows:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;myNamespace&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// code declarations where &lt;/span&gt;
	     &lt;span class="c1"&gt;// x and y are declared in &lt;/span&gt;
	     &lt;span class="c1"&gt;// myNamespace's scope&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So far we've seen the usage of the namespace &lt;code&gt;std&lt;/code&gt; which groups the C++ standard libraries. There are three different ways of using this namespace:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 1. Use whole namespace&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// generic usage of std, everything from std is now known/accesible dircetly&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Rest of Code &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; END"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Access specific names via qualified names&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Rest of Code &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; END"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// fully qualified name "namespaceName::name"&lt;/span&gt;

&lt;span class="c1"&gt;// 3. Declare specific parts&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// specifc import of what is needed&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Rest of Code &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; END"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://schoettkr.github.io/knowledge-database/posts/computer_science_I/cs-I-08/</guid><pubDate>Thu, 29 Nov 2018 23:00:00 GMT</pubDate></item><item><title>Database Essentials - Lecture 06</title><link>https://schoettkr.github.io/knowledge-database/posts/database_essentials/db-essentials-06/</link><dc:creator>schoettkr</dc:creator><description>&lt;p&gt;
In this lecture we continued the Introduction to SQL that we began in the last session.
&lt;/p&gt;

&lt;div id="outline-container-org82f4e96" class="outline-2"&gt;
&lt;h2 id="org82f4e96"&gt;Introduction to SQL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org82f4e96"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb11ee30" class="outline-3"&gt;
&lt;h3 id="orgb11ee30"&gt;Simple Queries (One Table)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb11ee30"&gt;
&lt;p&gt;
All queries to a database in SQL are realized via the &lt;code&gt;select&lt;/code&gt; statement.
This is the general construction:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; &lt;code&gt;attribute|expression&lt;/code&gt; → which attributes should the result table contain?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt; &lt;code&gt;list of tables&lt;/code&gt; → which tables are required for the query?&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;where&lt;/code&gt;  &lt;code&gt;condition&lt;/code&gt; ] → which conditions should the result tuples fulfill?&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;group by&lt;/code&gt;  &lt;code&gt;list of attributes&lt;/code&gt; ] → summarize/condense identical attribute values&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;having&lt;/code&gt;  &lt;code&gt;condition&lt;/code&gt; ] → condition in regards to grouped tables&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;order by&lt;/code&gt;  &lt;code&gt;sort&lt;/code&gt; ] → specification of sorting for the resulting table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The &lt;code&gt;where&lt;/code&gt; clause is used to refine the result set of tuples from a &lt;code&gt;select&lt;/code&gt; statement. The (basic) predicates (Basisprädikate) to &lt;code&gt;where&lt;/code&gt; can be versatile, for example
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;comparison between the value of one expression and another&lt;/li&gt;
&lt;li&gt;specify range/boundaries for a certain value&lt;/li&gt;
&lt;li&gt;is the value included in a value set&lt;/li&gt;
&lt;li&gt;is there a certain pattern in a string&lt;/li&gt;
&lt;li&gt;is the value of an attribute equal to the null value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Expressions are based on constant values and/or attribute values and can be connected via arithmetic operators (+,-,*,/,%). The predicates (Basisprädikate) can be connected via logical operators (&lt;code&gt;not&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
There are also comparison operators for the fundamental datatypes which allow a value comparison (for numbers), a lexicographic comparison (for strings) and a time/date based comparison (for dates and times). The usual operators for these are =, &amp;lt;, &amp;gt; ≤, ≥, &amp;lt;&amp;gt;.
&lt;/p&gt;

&lt;p&gt;
Now lets look at some simple queries (selection σ &amp;amp; projection π). We have the following table /Lecture/s
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;persNr{FK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;6123&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;456&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
To find the name/title of the lectures held by a teacher with the personal number of 6897 we perform this query
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;persNr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6897&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which yields
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Usually queries consist of at least these blocks we've just seen: &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt; and that's why they're often refered to as SFW-block (select-from-where).
&lt;/p&gt;

&lt;p&gt;
Now lets perform a query and formulate a string predicate to find out the number of the lecture 'Data Structures':
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Data Structures'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Which gives 
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number {PK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
As you can see string constants have to be wrapped in single quotes (in contrast to numeric values). Among other reasons this is done to distinguish the values from attribute names.
&lt;/p&gt;

&lt;p&gt;
Let's match a string pattern to find all lectures that are about databases:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%Database%'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;persNr{FK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;6123&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;456&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
To find the name/title of the lectures held by a teacher with the personal number of 6897 we perform this query
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;persNr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6897&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which yields
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Usually queries consist of at least these blocks we've just seen: &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt; and that's why they're often refered to as SFW-block (select-from-where).
&lt;/p&gt;

&lt;p&gt;
Now lets perform a query and formulate a string predicate to find out the number of the lecture 'Data Structures':
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Data Structures'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Which gives 
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number {PK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
As you can see string constants have to be wrapped in single quotes (in contrast to numeric values). Among other reasons this is done to distinguish the values from attribute names.
&lt;/p&gt;

&lt;p&gt;
Let's match a string pattern to find all lectures that are about databases:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%Database%'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Result:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;persNr{FK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;6123&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
In this query we used &lt;b&gt;wildcard characters&lt;/b&gt; (placeholder symbols) to match a certain pattern. The wildcard character for an arbitrary, single character is &lt;code&gt;_&lt;/code&gt; and for an arbitrary string it is &lt;code&gt;%&lt;/code&gt;. Beware that the keyword &lt;code&gt;like&lt;/code&gt; is required to do a pattern match (else it is just literal string match).
&lt;/p&gt;

&lt;p&gt;
So let's look at queries where we want to select tuples based on wheather or not an attribute value is contained in a set. We therefore modified our original /Lecture/s table:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;credits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;456&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
To select all lectures with 3, 5 or 10 credits
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;credits&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
A set of constants can be specified by putting them into parentheses as you can see above. To test weather a value is contained in a set we use the &lt;code&gt;in&lt;/code&gt; resp. &lt;code&gt;not in&lt;/code&gt; operator. The previous query could have been formulated via logical connection like this as well
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;credits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;credits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;credits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which is more cumbersome in this case.
&lt;/p&gt;

&lt;p&gt;
The last simple query we'll look at uses ranges/boundaries to find all tuples with at least 3 and at max 10 credits.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;credits&lt;/span&gt; &lt;span class="k"&gt;between&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="c1"&gt;-- alternatively: where credits &amp;gt;= 3 and credits &amp;lt;= 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which yields the following result relation:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;credits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3175f27" class="outline-3"&gt;
&lt;h3 id="org3175f27"&gt;Complex Queries (Multiple Tables)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3175f27"&gt;
&lt;p&gt;
Onto some more complex queries where we query against multiple tables (cartesian product). Suppose we have the following table &lt;i&gt;Lecture&lt;/i&gt;
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
and &lt;i&gt;Hears&lt;/i&gt;
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;matrNr&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-right"&gt;134534&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-right"&gt;123456&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-right"&gt;234876&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-right"&gt;134534&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
and want to find out the numbers and titles of the lectures that the student with matricle number 134534 attends.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;matrNr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;134534&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This yields
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
As we can see in the query above we specify all the tables that are needed to resolve the query as comma seperated list after the &lt;code&gt;from&lt;/code&gt; keyword. Then the cartesian product of the tables is formed internally, that's why we have to do &lt;code&gt;where Lecture.number = Hears.number&lt;/code&gt; when selecting the tempoarily resulting rows.
&lt;/p&gt;

&lt;p&gt;
Because the temporary resulting relation holds the attribute &lt;i&gt;number&lt;/i&gt; two times (once from &lt;i&gt;Lecture&lt;/i&gt; and once from &lt;i&gt;Hears&lt;/i&gt;) we have to qualify the attribute we want to &lt;code&gt;select&lt;/code&gt; by prepending the attribute name with the table name (&lt;code&gt;select Hears.number&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
It is also possible to provide an alias to tables in the &lt;code&gt;from&lt;/code&gt; clause ala
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;matrNr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;134534&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
to improve readability and shorten long table names.
&lt;/p&gt;

&lt;p&gt;
When targeting the same table two or more times in one query it is &lt;b&gt;required&lt;/b&gt; to provide those aliases to distinguish between the tables:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;matrNr&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;credits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123456&lt;/td&gt;
&lt;td class="org-left"&gt;Archimedes&lt;/td&gt;
&lt;td class="org-right"&gt;45&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;134534&lt;/td&gt;
&lt;td class="org-left"&gt;Sophokles&lt;/td&gt;
&lt;td class="org-right"&gt;33&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;145698&lt;/td&gt;
&lt;td class="org-left"&gt;Cleopatra&lt;/td&gt;
&lt;td class="org-right"&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
We want to find the name and credits of the students that have more credits than "Cleopatra":
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;credits&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Cleopatra'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;credits&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;credits&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
↓
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;credits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Archimedes&lt;/td&gt;
&lt;td class="org-right"&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Back to the previous example where we wantet to find out the numbers and titles of the lectures that the student with matricle number 134534 attends, because this is a use case for theta joins (\(⋈_{\theta}\) - join one &lt;i&gt;some&lt;/i&gt; condition):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;   &lt;span class="n"&gt;Lecture&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt;
       &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Lecture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt;  &lt;span class="n"&gt;matrNr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;134534&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
To perform a theta join the &lt;code&gt;from&lt;/code&gt; clause is exteneded with the keyword &lt;code&gt;join&lt;/code&gt; between the involved tables, followed by the keyword &lt;code&gt;on&lt;/code&gt; after which the join condition is specified (because we compare with &lt;code&gt;=&lt;/code&gt; in the theta join it is an equijoin btw).
&lt;/p&gt;

&lt;p&gt;
However the most appropiate join in this use case is the &lt;i&gt;natural join&lt;/i&gt; ⊗ because we want to join on attributes that have the same name in both tables (and are foreign resp. primary keys). To do so in SQL we formulate this query:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Lectures&lt;/span&gt; &lt;span class="k"&gt;natural&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;Hears&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;matrNr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;134534&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
which yields the same old result relation (but with less query syntax):
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
As you see the natural join in SQL is express by replacing the comma between the involved tables in the &lt;code&gt;from&lt;/code&gt; clause with the keyword &lt;code&gt;natural join&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcc24ab0" class="outline-3"&gt;
&lt;h3 id="orgcc24ab0"&gt;Aggregation and Grouping&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcc24ab0"&gt;
&lt;p&gt;
Often times it is of interest to perform some kind of calculations on the tuples of a table, which means to involve all values of an attribute. Functions that do this are called &lt;i&gt;aggregate functions&lt;/i&gt; and here are some common ones:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;min(A)&lt;/code&gt; → yields smallest value present in attribute A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max(A)&lt;/code&gt; → yields largest value present in attribute A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avg(A)&lt;/code&gt; → yields average of all values present in attribute A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(A)&lt;/code&gt; → yields sum of all values present in attribute A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(A)&lt;/code&gt; → yields amount/count of values present in attribute A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(distinct A)&lt;/code&gt; → yields amount/count of unique values present in attribute A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(*)&lt;/code&gt; → yields amount/count of tuples in the table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Suppose we have the following table &lt;i&gt;Personal&lt;/i&gt; to see aggregate functions in action
&lt;img src="https://schoettkr.github.io/knowledge-database/images/personal-table.png" alt="nil"&gt;
To find out which is the highest and lowest salary(gehalt) in the table we formulate the following query
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gehalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gehalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;maximum&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Personal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
yielding 
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;minimum&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;maximum&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;2084&lt;/td&gt;
&lt;td class="org-right"&gt;5249&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Since the result of an aggregate function usually operates on &lt;i&gt;multiple&lt;/i&gt; tuples of a relation, the result can only be displayed with results of other aggregate functions rather than other &lt;i&gt;single&lt;/i&gt; attributes (think about it this way, which single attribute would make sense in the row of the result relation we just saw? none).
&lt;/p&gt;

&lt;p&gt;
It is also possible to &lt;b&gt;group&lt;/b&gt; values. Tuple that have the same value for an attribute (or set of attributes) are then &lt;b&gt;grouped&lt;/b&gt; by those same attribute values. Aggregate functions then operate &lt;b&gt;isolated&lt;/b&gt; on those formed groups, which means grouping only makes sense when aggregations are performed subsequently. The schema of the resulting table can only hold the grouped attributes and the result of the attribute functions.
&lt;/p&gt;

&lt;p&gt;
This slide gives a good visualization 
&lt;img src="https://schoettkr.github.io/knowledge-database/images/grouping-1.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
To &lt;i&gt;filter groups&lt;/i&gt; we can use the &lt;code&gt;having&lt;/code&gt; keyword which acts like a &lt;code&gt;where&lt;/code&gt; clause but for groups and follows the &lt;code&gt;group by&lt;/code&gt; statement.
&lt;img src="https://schoettkr.github.io/knowledge-database/images/grouping-2.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org97e44ab" class="outline-3"&gt;
&lt;h3 id="org97e44ab"&gt;Connecting SFW Statements&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org97e44ab"&gt;
&lt;p&gt;
It is possible to connect whole &lt;code&gt;select&lt;/code&gt; statements with each other in SQL. This functionality corresponds to the operations set &lt;i&gt;union&lt;/i&gt; and set &lt;i&gt;difference&lt;/i&gt; we know from relational algebra. Likewise the data types of the attributes from the tables that should be combined need to be of the same data type (and semantic) in SQL as well.
&lt;/p&gt;

&lt;p&gt;
The operators to perform this set operations
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;union&lt;/code&gt; corresponds to the join/union operation ∪ from relational algebra and also removes duplicates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;except&lt;/code&gt;, &lt;code&gt;minus&lt;/code&gt; corresponds to the set difference - from relational algebra&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersect&lt;/code&gt; corresponds to the intersection ∩ from relational algebra (Schnittmenge)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Example of combining/connecting SFW statements:
&lt;img src="https://schoettkr.github.io/knowledge-database/images/sfw-connection.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb9a999d" class="outline-3"&gt;
&lt;h3 id="orgb9a999d"&gt;Subqueries&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb9a999d"&gt;
&lt;p&gt;
It is possible to execute further &lt;code&gt;select&lt;/code&gt; statements &lt;i&gt;inside&lt;/i&gt; a &lt;code&gt;select&lt;/code&gt; statements. There are two possible approaches/semantics (Semantiken) to do that, the &lt;b&gt;value semantic&lt;/b&gt; (slides: Wertsemantik) and the &lt;b&gt;set semantic&lt;/b&gt; (slides: Mengensemantik?!). I'll use the german terms &lt;i&gt;Wertsemantik&lt;/i&gt; and &lt;i&gt;Mengensemantik&lt;/i&gt; because it is not clear to me what the proper english terms would be :o. Subqueries can be nested as desired as long as the semantic is correct (recursion).
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf7ff1b5" class="outline-4"&gt;
&lt;h4 id="orgf7ff1b5"&gt;Wertsemantik&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf7ff1b5"&gt;
&lt;p&gt;
The subquery returns a &lt;b&gt;single value&lt;/b&gt; (doesnt matter if string, number or date). Subqueries that follow Wertsemantik can be used at every place/position where single values may have been used.
&lt;/p&gt;

&lt;p&gt;
Example:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/wertsemantik-1.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/wertsemantik-2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
↑ then the surrounding/wrapping query is executed which finds the two tuples with a number of "234" in the &lt;i&gt;Hears&lt;/i&gt; table which is then counted and returns the result table 
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;anzahl&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here are some equivalent queries to the one we examined in the pictures above
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 1&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;anzahl&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Hört&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lehrveranstaltung&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;Hört&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nummer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lehrveranstaltung&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nummer&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;titel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Datenbanken in der Praxis'&lt;/span&gt;

&lt;span class="c1"&gt;-- 2&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;anzahl&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Hört&lt;/span&gt; &lt;span class="k"&gt;natural&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;Lehrveranstaltung&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;titel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Datenbanken in der Praxis'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org573401e" class="outline-4"&gt;
&lt;h4 id="org573401e"&gt;Mengensemantik&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org573401e"&gt;
&lt;p&gt;
The subquery returns a Wertemenge (set of values). To then evaluate the returned result set special language features/constructs are needed.
&lt;/p&gt;

&lt;p&gt;
Example:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/mengensemantik-1.png" alt="nil"&gt;
Notice that when the subquery generates a set of values like in the picture above, the &lt;code&gt;=&lt;/code&gt; operator at the &lt;code&gt;where&lt;/code&gt; statement is replaced by the &lt;code&gt;in&lt;/code&gt; set operator because we're dealing with multiple values. This is the procedure of the query above:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/mengensemantik-2.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/mengensemantik-3.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/mengensemantik-4.png" alt="nil"&gt;
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;
The subqueries we saw so far were &lt;b&gt;non-correlating&lt;/b&gt;. They worked locally and had only to be evaluated once because their result stayed constant because of the local nature.
&lt;/p&gt;

&lt;p&gt;
But suppose we want to access attribute values of surrounding/wrapping queries. 
This is where &lt;b&gt;correlating subqueries&lt;/b&gt; come into play. It is possible to access wrapping/surrounding tables from the inside of subqueries (the circumstances may require qualification via the table name). The correlation is created as soon as such reference exists. A correlating subquery always refers to the currently viewed tuple of the parent query and therefore has to be computed for &lt;b&gt;every&lt;/b&gt; tuple of the result set (slides: Eine korrelierte Unteranfrage bezieht sich immer auf das aktuell betrachtete Tupel der übergeordneten Anfrage und muss deshalb für jedes Tupel von deren Ergebnismenge neu berechnet werden).
&lt;/p&gt;

&lt;p&gt;
Example:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/correlating-subqueries-1.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/correlating-subqueries-2.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8d84616" class="outline-3"&gt;
&lt;h3 id="org8d84616"&gt;Set Operations (Mengenoperatoren)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8d84616"&gt;
&lt;p&gt;
We already know the specification of constant sets and how to test if an attribute value is contained in such set via &lt;code&gt;where .. in&lt;/code&gt; eg &lt;code&gt;where attribute in ('Chemnitz', 'Leipzig', 'Dresden')&lt;/code&gt;. There are more set operators of which we will introduce some now since they're also helpful in regards to subqueries and can be used to model the quantifiers from relational calculus:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;exists SET&lt;/code&gt;  becomes &lt;code&gt;true&lt;/code&gt; when &lt;code&gt;SET&lt;/code&gt; includes at least one element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COMPARISON-OPERATOR all SET&lt;/code&gt; becomes &lt;code&gt;true&lt;/code&gt; when the comparison operator yields &lt;code&gt;true&lt;/code&gt; for each element in &lt;code&gt;SET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COMPARISON-OPERATOR any SET&lt;/code&gt; becomes &lt;code&gt;true&lt;/code&gt; when the comparison operator yields &lt;code&gt;true&lt;/code&gt; for any element in &lt;code&gt;SET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Examples:
&lt;img src="https://schoettkr.github.io/knowledge-database/images/set-operators-1.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/set-operators-2.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/set-operators-3.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://schoettkr.github.io/knowledge-database/posts/database_essentials/db-essentials-06/</guid><pubDate>Tue, 27 Nov 2018 23:00:00 GMT</pubDate></item><item><title>Algos &amp; Programming - Lecture 15 &amp; 16</title><link>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-15-16/</link><dc:creator>schoettkr</dc:creator><description>&lt;p&gt;
This blog post contains the material covered in lecture 15 and 16 because it is the same subject and it does not make sense to split it :P.
&lt;/p&gt;

&lt;div id="outline-container-orgd96ab9c" class="outline-2"&gt;
&lt;h2 id="orgd96ab9c"&gt;Complexity&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd96ab9c"&gt;
&lt;p&gt;
As you've hopefully already noticed there are algorithms that differ in regards to &lt;i&gt;efficiency&lt;/i&gt;. &lt;b&gt;Algorithmic efficiency&lt;/b&gt; refers to the number of &lt;b&gt;computational resources&lt;/b&gt; (&lt;i&gt;computation time&lt;/i&gt; and &lt;i&gt;memory space&lt;/i&gt;) used by the algorithm.
&lt;/p&gt;

&lt;p&gt;
For maximum efficiency we wish to minimize resource usage. However, different resources such as time and space complexity cannot be compared directly, so which of two algorithms is considered to be more efficient often depends on which measure of efficiency is considered most important.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfe55b46" class="outline-3"&gt;
&lt;h3 id="orgfe55b46"&gt;RAM Model&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfe55b46"&gt;
&lt;p&gt;
It is impractical to measure the computation time with a stopwatch or operating system functions because then there'd be a lot of other factors involved such as compiler, hardware and operating system.
&lt;/p&gt;

&lt;p&gt;
But to measure the quality of &lt;i&gt;algorithms&lt;/i&gt; (not their implementation) we don't even need a time because we use &lt;i&gt;abstract computer models&lt;/i&gt;. For example the &lt;b&gt;Random Access Machine&lt;/b&gt; (RAM model) which is used for computational complexity analysis.
&lt;/p&gt;

&lt;p&gt;
RAM Components:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;program&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;numbered, finite series of instructions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;storage&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;enumerable (infinite) amount of storage locations(registers) (slides: abzählbar (unendlich) viele Speicherstellen (Register))&lt;/li&gt;
&lt;li&gt;arbitrarily accessible&lt;/li&gt;
&lt;li&gt;every register can store an arbitrary integer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;in-/output&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;continuous sequences (bänder, ribbons)&lt;/li&gt;
&lt;li&gt;either input (read) or output (write) in the given situation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;central processing unit
&lt;ul class="org-ul"&gt;
&lt;li&gt;instruction counter that holds the number of the instruction that is to be executed&lt;/li&gt;
&lt;li&gt;accumulator = target register of computations, address 0&lt;/li&gt;
&lt;li&gt;arithmetic logic unit = enginge / functional unit for execution of operations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/random-access-machine.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The "common/usual" instructions are available in a RAM:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;basic arithmetic operations: + - * / mod&lt;/li&gt;
&lt;li&gt;comparisons: &amp;gt; &amp;lt; = ≥ ≤&lt;/li&gt;
&lt;li&gt;branching/conditions: if&lt;/li&gt;
&lt;li&gt;jumps : GOTO (loops are branches with jumps btw)&lt;/li&gt;
&lt;li&gt;loading/storing: LOAD, STORE&lt;/li&gt;
&lt;li&gt;in-/output: READ, WRITE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Operands:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;registers (can be chosen arbitrarily), also indirectly&lt;/li&gt;
&lt;li&gt;accumulator (implicit)&lt;/li&gt;
&lt;li&gt;input sequence and output sequence (not arbitrarily ~ nicht wahlfrei)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
For the RAM there are two models of measuring the time cost:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;uniform cost measure: every instruction has a time cost of 1 time unit (eg Takt/clock signal or millisecond ..)
&lt;ul class="org-ul"&gt;
&lt;li&gt;since every instruction has the same length/duration the instrucion &lt;b&gt;executions&lt;/b&gt; are determining the cost&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;logarithmic time cost measure: the length of the numbers that have to be processed determine the time
&lt;ul class="org-ul"&gt;
&lt;li&gt;length l(x) of x ∈ G:  l(0) = 1, l(x) = (log&lt;sub&gt;2&lt;/sub&gt; |x|) + 1&lt;/li&gt;
&lt;li&gt;the logarithmic time costs of an instruction are equal to the sum of the length of the numbers that have to be processed&lt;/li&gt;
&lt;li&gt;the logarithmic time cost measure should be usend when the size/length of the numbers is of critical significance&lt;/li&gt;
&lt;li&gt;in addition to the instruction executions the size of the operands is of importance in regards to the cost&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Instructions that are executed in a loop are counted repeatedly and since the execution of instructions (and loop iterations) often depends on the input size n we measure the amount of instructions that are executed with T&lt;sub&gt;A&lt;/sub&gt;(n), for example:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Algorithm&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;T&lt;sub&gt;A&lt;/sub&gt;(n)&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;optimal for&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;A&lt;sub&gt;1&lt;/sub&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;1000 * n&lt;/td&gt;
&lt;td class="org-left"&gt;n ≥ 101&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;A&lt;sub&gt;2&lt;/sub&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;200*n*log n&lt;/td&gt;
&lt;td class="org-left"&gt;never&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;A&lt;sub&gt;3&lt;/sub&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;10 * n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;10 ≤ n ≤ 100&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;A&lt;sub&gt;4&lt;/sub&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;1 ≤ n ≤ 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgea74082"&gt;&lt;/a&gt;Run-time Analysis&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgea74082"&gt;
&lt;p&gt;
Even for constant \(n\) is T&lt;sub&gt;A&lt;/sub&gt; not always the same:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;worst case analysis
&lt;ul class="org-ul"&gt;
&lt;li&gt;for every n define the runtime as T(n) = max(t(Input)), ∀ |Input| = n&lt;/li&gt;
&lt;li&gt;guaranteed boundaries for every input&lt;/li&gt;
&lt;li&gt;used as standard&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;average case analysis
&lt;ul class="org-ul"&gt;
&lt;li&gt;for every n define the runtime as T(n) = \(\bar{t}\)(Input) ∀ |Input| = n&lt;/li&gt;
&lt;li&gt;depends on the definition of average → distribution of inputs&lt;/li&gt;
&lt;li&gt;rarely used (hard to determine the average)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;best case analysis
&lt;ul class="org-ul"&gt;
&lt;li&gt;for every n define the runtime as T(n) = min(t(Input)), ∀ |Input| = n&lt;/li&gt;
&lt;li&gt;looks for minimal runtime&lt;/li&gt;
&lt;li&gt;shows design mistakes (Entwurfsfehler)&lt;/li&gt;
&lt;li&gt;has no real significance (easy to cheat)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In general the analysis of T&lt;sub&gt;A&lt;/sub&gt; is rather hard that's why &lt;i&gt;order of magnitudes&lt;/i&gt; (Größenordnungen) are used more commonly. We know such from real life eg: v&lt;sub&gt;Laufen&lt;/sub&gt; &amp;lt; v&lt;sub&gt;Rad&lt;/sub&gt; &amp;lt; v&lt;sub&gt;Auto&lt;/sub&gt; &amp;lt; v&lt;sub&gt;Flugzeug&lt;/sub&gt; 
&lt;/p&gt;

&lt;p&gt;
Note: I skipped the slides on "big A notation" here because I fail to see the relevance of it and cant find anything about in the internet (slides 14-15, chapter 8).
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge232fb0" class="outline-2"&gt;
&lt;h2 id="orge232fb0"&gt;Big O Notation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge232fb0"&gt;
&lt;p&gt;
Often times the &lt;b&gt;growth rate&lt;/b&gt; of algorithms/function is of interest. The &lt;b&gt;big-O notation&lt;/b&gt; is commonly used to describe how a function grows. A common goal is to find algorithms/functions that are still efficient for large problem instances (inputs) and if that is the case we usually say that they scale good. Two functions eg \(f(n)\) and \(g(n)\) have the same growth rate when the ratio for a sufficient amount of \(n\) is limited by the same constant upper and lower boundaries (slides: Zwei Funktionen f(n) und g(n) haben das gleiche Wachstumsverhalten, falls für genügend große n das Verhältnis der beiden nach oben und unten durch Konstanten beschränkt ist), which means that \(c &amp;lt; \frac{f(n)}{g(n)} and \frac{g(n)}{f(n)}\) needs to be true.
For example:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;\(f_1(n)=n^2\) and \(f_2(n)=5*n^2-7*n\) have the &lt;b&gt;same grow&lt;/b&gt; because for all \(n &amp;gt; 2\) the following applies: \(\frac{1}{5} &amp;lt; \frac{(5n^2-7n)}{n^2} &amp;lt; 5\) and \(\frac{1}{5} &amp;lt; \frac{n^2}{(5n^2-7n)} &amp;lt; 5\)&lt;/li&gt;
&lt;li&gt;\(f_1(n)=n^2\) and \(f_2(n)=n^3\) do &lt;b&gt;not have the same grow&lt;/b&gt; because for all sufficient large \(n\) (hinreichend groß) the following applies \(\frac{n^3}{n^2} = n &amp;gt; c\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The big O notation (big O refers to the greek letter omikron) is also called &lt;b&gt;Landau Notation&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Big O Notation can also be used to state which function dominates the growth. For two monotone function f(n) and g(n) the function f(n) dominates the function g(n) if \(g(n) \in \mathcal{O}(f(n))\). The notation \(dom(f(n),g(n))\) yields the dominating function. For example
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;dom(n&lt;sup&gt;3&lt;/sup&gt;, n&lt;sup&gt;2&lt;/sup&gt;) = n&lt;sup&gt;3&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;dom(2&lt;sup&gt;n&lt;/sup&gt;, n&lt;sup&gt;k&lt;/sup&gt;) = 2&lt;sup&gt;n&lt;/sup&gt; (for constant k &amp;gt; 1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There are also some computation rules (Rechenregeln) when it comes to big O:
\[
\mathcal{O}(f(n)) + \mathcal{O}(g(n)) = \mathcal{O}(f(n) + g(n))\\
\mathcal{O}(f(n) + g(n)) = \mathcal{O}(dom(f(n), g(n)))\\
\mathcal{O}(f(n)) * \mathcal{O}(g(n)) = \mathcal{O}(f(n) * g(n))
\]
&lt;/p&gt;

&lt;p&gt;
These are some common types/classes of functions in regards to big O:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Notation&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Term&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Typical Algorithms/Operations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;O(1)&lt;/td&gt;
&lt;td class="org-left"&gt;constant&lt;/td&gt;
&lt;td class="org-left"&gt;addition, comparisons, recursive call&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(log n)&lt;/td&gt;
&lt;td class="org-left"&gt;logarithmic&lt;/td&gt;
&lt;td class="org-left"&gt;search in a sorted sequence&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(n)&lt;/td&gt;
&lt;td class="org-left"&gt;linear&lt;/td&gt;
&lt;td class="org-left"&gt;modifying each element of a set&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(n * log n)&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;good sorting algorithm&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(n * log n)&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;good sorting algorithms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(n * log&lt;sup&gt;2&lt;/sup&gt; n)&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;good sorting algorithms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;….&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
&lt;td class="org-left"&gt;quadratic&lt;/td&gt;
&lt;td class="org-left"&gt;primitive sorting algorithms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(n&lt;sup&gt;k&lt;/sup&gt;), k &amp;gt;= 2&lt;/td&gt;
&lt;td class="org-left"&gt;polynomial&lt;/td&gt;
&lt;td class="org-left"&gt;primitive sorting algorithms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;trying combinations&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;O(k&lt;sup&gt;n&lt;/sup&gt;), k &amp;gt; 1&lt;/td&gt;
&lt;td class="org-left"&gt;exponential&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The O(n)-notation depends on the size of the input, that is the storage space in bits or words. 
&lt;/p&gt;

&lt;p&gt;
In addition to the most common big O notation there are several related notations to describe other kinds of bounds on asymptotic growth rates:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;big Omega notation \(\Omega(f(n)) = {g(n) \exists c &amp;gt; 0, \exists n_0 &amp;gt;0, \forall n &amp;gt; n_0, g(n) \geq c * f(n)}\) → lower boundary / "mindestens"&lt;/li&gt;
&lt;li&gt;big Theta notation \(\Theta(f(n)) = \mathcal{O}(f(n)) \cap \Omega(f(n))\) → exactly / "genau"&lt;/li&gt;
&lt;li&gt;little o notation \(o(f(n)) = {g(n) | \forall c &amp;gt; 0, \exists n_0 &amp;gt; 0, \forall n &amp;gt; n_0, g(n) \leq c*f(n)}\) → at max / "weniger"&lt;/li&gt;
&lt;li&gt;little omega notation \(o(f(n)) = {g(n) | \forall c &amp;gt; 0, \exists n_0 &amp;gt; 0, \forall n &amp;gt; n_0, g(n) \geq c*f(n)}\) →  "mehr"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
What followed in the slides are some example computation times for different complexities and algorithms.
&lt;/p&gt;

&lt;p&gt;
Take for example the algorithm to search the minimum in a sequence:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;a_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="n"&gt;a_n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ensure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_1&lt;/span&gt;&lt;span class="p"&gt;,...,&lt;/span&gt; &lt;span class="n"&gt;a_n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a_1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a_i&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In the above example the complexities are \(\mathcal{O}(n)\), Ω (n) and Θ (n).
&lt;/p&gt;

&lt;p&gt;
Take a look at the lecture slides (chapter 8) from slide 26 to see some more examples.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1c4b604" class="outline-4"&gt;
&lt;h4 id="org1c4b604"&gt;Better Sorting&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1c4b604"&gt;
&lt;p&gt;
The sorting algorithms we saw so far (bubble sort and insertion sort) have a complexity in \(\mathcal{O}(n^2)\). Quicksort and Mergesort are generally better sorting algorithms. Let's look at quicksort:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="n"&gt;e_n&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nl"&gt;ensure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;e_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;e_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// sorted sequence condition &lt;/span&gt;

&lt;span class="n"&gt;procedure&lt;/span&gt; &lt;span class="n"&gt;QSORT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;

  &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="s"&gt;"pivot"&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;

  &lt;span class="n"&gt;less&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;greater&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="s"&gt;"pivot"&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; 
      &lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QSORT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QSORT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greater&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;procedure&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Because of the built-in list type a quicksort implementation in Python is pretty easy:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
	&lt;span class="n"&gt;less&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
	&lt;span class="n"&gt;greater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[2, 7, 8, 9, 54]

&lt;/pre&gt;

&lt;p&gt;
The depth of the recursion in quick sort is not set in stone. How does the worse case look? The pivot element is always the smallest or largest element in the list so the recursion depth is n - 1 (why?). On each recursion call \(i = |array| - 1\) elements are handled  which results in a recursion depth of n - recursion depth. 
In the worst case the complexity would be Θ(n&lt;sup&gt;2&lt;/sup&gt;) so it wouldn't &lt;b&gt;always&lt;/b&gt; be better than eg bubble sort! In such situation it makes sense to look at the average case (see slide 35 for that).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgde57488" class="outline-4"&gt;
&lt;h4 id="orgde57488"&gt;Space Complexity (Storage/Memory)&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgde57488"&gt;
&lt;p&gt;
The required memory space is another critical resource in addition to the computation time. To measure this the same complexity measures are used. Let's look at the required storage space complexity for quicksort:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;new arrays are created on each recursion&lt;/li&gt;
&lt;li&gt;the required storage space is \(n\) in every recursion depth&lt;/li&gt;
&lt;li&gt;the maximum recursion depth is \(n-1\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
→ storage complexity of quicksort is \(\mathcal{O}(n^2)\).
&lt;/p&gt;

&lt;p&gt;
However a storage complexity of \(\mathcal{O}(n)\) is achievable via a smart quicksort implementation by using &lt;i&gt;in place&lt;/i&gt; mutations. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>A&amp;P</category><category>university</category><guid>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-15-16/</guid><pubDate>Sun, 25 Nov 2018 23:00:00 GMT</pubDate></item><item><title>Algos &amp; Programming - Lecture 14</title><link>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-14/</link><dc:creator>schoettkr</dc:creator><description>&lt;div id="outline-container-org6e8cbea" class="outline-2"&gt;
&lt;h2 id="org6e8cbea"&gt;Design and Correctness of Algorithms&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6e8cbea"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org53555a0" class="outline-3"&gt;
&lt;h3 id="org53555a0"&gt;Pseudocode&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org53555a0"&gt;
&lt;p&gt;
As we've learnt in the last lecture &lt;i&gt;pseudocode&lt;/i&gt; is one of the most popular semiformal specification languages.
&lt;/p&gt;

&lt;p&gt;
Pseudocode generally defines a set of instructions, there are no strict rules on how pseudocode needs to look like, therefore there are many forms of it, which is okay as long as it is intuitively readable.
&lt;/p&gt;

&lt;p&gt;
Example pseudocode for the Euclidian Algorithm:
&lt;/p&gt;

&lt;p style="background:lightgrey;"&gt;
&lt;b&gt;Require:&lt;/b&gt; A, B ∈ N, A &amp;gt; 0 ∩ B &amp;gt; 0&lt;br&gt;
&lt;b&gt;Ensure:&lt;/b&gt; a = b = gcd(A, B)&lt;br&gt;
a ← A; b ← B&lt;br&gt;
&lt;b&gt;while&lt;/b&gt; a ≠ b &lt;b&gt;do&lt;/b&gt;&lt;br&gt;
   &lt;b&gt;if&lt;/b&gt; a &amp;lt; b &lt;b&gt;then&lt;/b&gt;&lt;br&gt;
      b ← b - a&lt;br&gt;
   &lt;b&gt;else&lt;/b&gt;&lt;br&gt;
      a ← a - b&lt;br&gt;
   &lt;b&gt;end if&lt;/b&gt;&lt;br&gt;
&lt;b&gt;end while&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
The slides note at this point that in the future we'll often look at algorithms in pseudo code.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9ee54eb" class="outline-3"&gt;
&lt;h3 id="org9ee54eb"&gt;Correctness&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9ee54eb"&gt;
&lt;p&gt;
When you find an approach for a problem / an algorithm, the &lt;i&gt;correctness&lt;/i&gt; has to be validated.
&lt;/p&gt;

&lt;p&gt;
It is advised to verify the correctness of the idea first and then the correctness of the concrete algorithm.
The correctness of an idea cannot be verified formally, but the following things should be pondered:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;does the idea work &lt;i&gt;in general&lt;/i&gt; or just for a &lt;i&gt;specific case&lt;/i&gt;?&lt;/li&gt;
&lt;li&gt;are there &lt;i&gt;special cases&lt;/i&gt; in which the idea does not work out? are these relevant?&lt;/li&gt;
&lt;li&gt;try finding an &lt;i&gt;counter-example&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;what about &lt;i&gt;extreme cases&lt;/i&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
What follows on slides 25-30 are some example problems and ideas to solve them, take a look there if you want.
&lt;/p&gt;

&lt;p&gt;
As stated before the correctness of the concrete algorithm also has to be validated. There are in general two ways to do this:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;Exhaustive Testing&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;verify that there is no incorrect behaviour in the implementation of the algorithm by testing/executing it with all possible data inputs/combinations&lt;/li&gt;
&lt;li&gt;Problems:
&lt;ul class="org-ul"&gt;
&lt;li&gt;usually this is &lt;i&gt;impossible&lt;/i&gt; since the possible data combinations are really large or even infinite&lt;/li&gt;
&lt;li&gt;&lt;i&gt;partial testing&lt;/i&gt; may boost the confidence in regards to the correctness of a program/algorithm, but does not replace a proof&lt;/li&gt;
&lt;li&gt;a good selection of test cases is difficult&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Correctness Proof&lt;/b&gt; (Korrektheitsbeweis)
&lt;ul class="org-ul"&gt;
&lt;li&gt;verify correct behaviour via mathematical methods/proofs&lt;/li&gt;
&lt;li&gt;Problems:
&lt;ul class="org-ul"&gt;
&lt;li&gt;are difficult or impossible on the level of implementation because of lacking formalization&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
To proof the correctness it can be performed on a more &lt;i&gt;abstract level&lt;/i&gt; instead. Mistakes are then however possible when performing the concrete implementation. We'll continue to look at proofs and not tests.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org35c579b" class="outline-3"&gt;
&lt;h3 id="org35c579b"&gt;Proofs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org35c579b"&gt;
&lt;p&gt;
Slides: Informale Definition = Ein Beweis ist eine Herleitung einer Aussage aus bereits bewiesenen Aussagen und/oder Grundannahmen (Axiomen)
&lt;/p&gt;

&lt;p&gt;
We know a few different (but still combinable) methods for proofs:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;deduction&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;classical proof via combination of premises&lt;/li&gt;
&lt;li&gt;eg: all humans are mortal(premise 1) &amp;amp; all kings are humans (premise 2) → all kings are mortal (conclusion/deduction)&lt;/li&gt;
&lt;li&gt;the correctness of the premises has to be given axiomatically or already been proven&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;complete case analysis/differentiation&lt;/b&gt; (vollständige Fallunterscheidung)
&lt;ul class="org-ul"&gt;
&lt;li&gt;when there are a finite amount of cases/variants then each one can be inspected individually&lt;/li&gt;
&lt;li&gt;if a statement is true for &lt;i&gt;every&lt;/i&gt; case/variant then the statement is true as a whole&lt;/li&gt;
&lt;li&gt;eg: "all odd integers in the intervall [2&lt;sup&gt;1&lt;/sup&gt;, 2&lt;sup&gt;3&lt;/sup&gt;] are prime numbers" (statement) → 3 is prime, 5 is prime, 7 is prime → statement is true&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;complete /transfinite induction&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;base cases (Induktionsanker/-anfang IA) show that a statement is valid for a special (smallest/first) case (often \(n = 0\) or \(n = 1\))&lt;/li&gt;
&lt;li&gt;step case / inductive step (Induktionsschritt)
&lt;ul class="org-ul"&gt;
&lt;li&gt;assume that the statement holds true for \(n=k\) (Induktionsvoraussetzung IV) and prove that then the statements holds for \(n=k+1\); proof that the &lt;i&gt;induction hypothesis&lt;/i&gt; follows from the &lt;i&gt;induction requirement&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Induktionsschluss → inference (Folgerung) that the statement holds for all cases starting at the first&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;indirect proof&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;assume the opposite of the hypothesis/statement and find a disproof via axioms and proven concepts → inference that the assumption is wrong and therefore the hypothesis/statment is true&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb6ea655" class="outline-3"&gt;
&lt;h3 id="orgb6ea655"&gt;Proofs of Algorithms&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb6ea655"&gt;
&lt;p&gt;
To prove an algorithm you have to ask two questions. 1) What is there to be proven (Specification)? 2.) What is already known?
&lt;/p&gt;

&lt;p&gt;
A distinction is made between 2 kinds of "correctness":
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;partial correctness&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;an algorithm is &lt;i&gt;partially correct&lt;/i&gt; if an answer is returned that this answer will be correct (slides: ein Algorithmus is partiell korrekt, wenn er für eine spezifizerte erfüllte Vorbedingung Q bei einer eventuellen/möglichen Terminierung eine spezifizerte Nachbedingung R erreicht, dh R is nach Ausführung erfüllt)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;total correctness&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;total correctness requires additionally to partial correctness that the algorithm &lt;b&gt;terminates&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
So, &lt;i&gt;if&lt;/i&gt; a partial correct algorithm terminates he yields a correct result and a total correct algorithm yields the correct result after a finite amount of time. 
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbcd9ec5" class="outline-4"&gt;
&lt;h4 id="orgbcd9ec5"&gt;Proving Sort Algorithms&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbcd9ec5"&gt;
&lt;p&gt;
We already got to know a sorting algorithm in one of the first lectures (bubble sort). The correctness of a solution to the problem of sorting can be expressed independently from the algorithm: Input = sequence of elements (e&lt;sub&gt;1&lt;/sub&gt;, e&lt;sub&gt;2&lt;/sub&gt;, …, e&lt;sub&gt;n&lt;/sub&gt;) → Output = permutation (e'&lt;sub&gt;1&lt;/sub&gt;, e'&lt;sub&gt;2&lt;/sub&gt;, …, e'&lt;sub&gt;n&lt;/sub&gt;) of (e&lt;sub&gt;1&lt;/sub&gt;, e&lt;sub&gt;2&lt;/sub&gt;, …, e&lt;sub&gt;n&lt;/sub&gt;) so that e'&lt;sub&gt;1&lt;/sub&gt; ≤ e'&lt;sub&gt;2&lt;/sub&gt; ≤ … ≤ e'&lt;sub&gt;n&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
The bubble sort algorithm would look like this in pseudocode:
&lt;/p&gt;

&lt;p style="background:lightgrey;"&gt;
&lt;b&gt;Require:&lt;/b&gt; e&lt;sub&gt;1&lt;/sub&gt;, …, e&lt;sub&gt;n&lt;/sub&gt;&lt;br&gt;
&lt;b&gt;Ensure:&lt;/b&gt; ∀ i ∈ {1, n-1}, e&lt;sub&gt;i&lt;/sub&gt; ≤ e&lt;sub&gt;i+1&lt;/sub&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p style="background:lightgrey;"&gt;
&lt;b&gt;repeat&lt;/b&gt;&lt;br&gt;
  &lt;i&gt;changed&lt;/i&gt; ← false&lt;br&gt;
  &lt;b&gt;for&lt;/b&gt; &lt;i&gt;i&lt;/i&gt; ← 1, …, &lt;i&gt;n&lt;/i&gt;-1 &lt;b&gt;do&lt;/b&gt;&lt;br&gt;
   &lt;b&gt;if&lt;/b&gt; e&lt;sub&gt;i&lt;/sub&gt; &amp;gt; e&lt;sub&gt;i+1&lt;/sub&gt; &lt;b&gt;then&lt;/b&gt;&lt;br&gt;
    SWAP(e&lt;sub&gt;i&lt;/sub&gt;, e&lt;sub&gt;i+1&lt;/sub&gt;)&lt;br&gt;
    &lt;i&gt;changed&lt;/i&gt; ← true&lt;br&gt;
   &lt;b&gt;end if&lt;/b&gt;&lt;br&gt;
  &lt;b&gt;end for&lt;/b&gt;&lt;br&gt;
&lt;b&gt;until&lt;/b&gt; &lt;i&gt;changed&lt;/i&gt; = false&lt;br&gt;
 
Proving the &lt;i&gt;partial correctness&lt;/i&gt; is simple: If this algorithm terminates &lt;i&gt;changed&lt;/i&gt; has to be &lt;i&gt;false&lt;/i&gt; which implicates that for no i ∈ {1, …, n-1} this e&lt;sub&gt;i&lt;/sub&gt; &amp;gt; e&lt;sub&gt;i+1&lt;/sub&gt; can be true which in reverse means that ∀ i ∈ {1, …, n-1}, e&lt;sub&gt;i&lt;/sub&gt; ≤ e&lt;sub&gt;i+1&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/Insertion_sort"&gt;&lt;i&gt;Insertion Sort&lt;/i&gt;&lt;/a&gt; is an alternative algorithm to solve the sorting problem. This is the corresponding pseudocode:
&lt;/p&gt;

&lt;p style="background:lightgrey;"&gt;
&lt;b&gt;Require:&lt;/b&gt; e&lt;sub&gt;1&lt;/sub&gt;, …, e&lt;sub&gt;n&lt;/sub&gt;&lt;br&gt;
&lt;b&gt;Ensure:&lt;/b&gt; ∀ i ∈ {1, n-1}, e&lt;sub&gt;i&lt;/sub&gt; ≤ e&lt;sub&gt;i+1&lt;/sub&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p style="background:lightgrey;"&gt;
&lt;b&gt;for&lt;/b&gt; j ← 2, …, n &lt;b&gt;do&lt;/b&gt;&lt;br&gt;
  &lt;i&gt;key&lt;/i&gt; ← e&lt;sub&gt;j&lt;/sub&gt;&lt;br&gt;
  &lt;i&gt;i&lt;/i&gt; ← j-1&lt;br&gt;
  &lt;b&gt;while&lt;/b&gt; (&lt;i&gt;i&lt;/i&gt; &amp;gt; 0) ∧ (e&lt;sub&gt;i&lt;/sub&gt; &amp;gt; key) &lt;b&gt;do&lt;/b&gt;&lt;br&gt;
   e&lt;sub&gt;i+1&lt;/sub&gt; ← e&lt;sub&gt;i&lt;/sub&gt;           ; move all elements that are greater than &lt;i&gt;key&lt;/i&gt; right&lt;br&gt;
   i ← i-1&lt;br&gt;
  &lt;b&gt;end while&lt;/b&gt;&lt;br&gt;
  e&lt;sub&gt;i&lt;/sub&gt;+1 ← key          ; fill the gap with &lt;i&gt;key&lt;/i&gt;&lt;br&gt;
&lt;b&gt;end for&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Take a look at slides 47 - 50 (chapter 7) for details on how to prove the correctness of insertion sort with lemmas.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org77d2b4b" class="outline-3"&gt;
&lt;h3 id="org77d2b4b"&gt;Soundness (Korrektheitskalküle)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org77d2b4b"&gt;
&lt;p&gt;
Proofs like the one we saw for bubble sort are &lt;i&gt;ad hoc&lt;/i&gt;. There are/is a special logic/calculus (Kalküle → formales System zum Ziehen logischer Schlüsse) in regards to the correctness of programs, for example the &lt;b&gt;FLoyd-Hoare logic&lt;/b&gt; (Hoare-Kalkül) or the &lt;b&gt;wp-Kalkül&lt;/b&gt; (Edsger Dijkstra).
&lt;/p&gt;

&lt;p&gt;
These logics/calculus use triples: {Precondition} Code {Postcondition}. There are axiomatic rules: \frac{premise}{consequence}
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org89042db" class="outline-3"&gt;
&lt;h3 id="org89042db"&gt;Termination&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org89042db"&gt;
&lt;p&gt;
&lt;b&gt;Partial Correctness&lt;/b&gt; is proven under the assumption that the code &lt;i&gt;terminates&lt;/i&gt;. Therefore termination has to be proven to prove &lt;b&gt;total correctness&lt;/b&gt;. This is especially critical when dealing with recursion (abort after finite steps and reach the recursion base) and loops (loop condition has to evaluate to false after finite steps and the loop body also has to terminate in each iteration).
&lt;/p&gt;

&lt;p&gt;
To prove termination of a loop a &lt;b&gt;termination function&lt;/b&gt; τ (Tau) has to be specified:
\[ \tau : V \rightarrow \mathbb{N} \]
&lt;/p&gt;

&lt;p&gt;
The termination function has to have the following characteristics:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;its values are natural numbers (including 0)&lt;/li&gt;
&lt;li&gt;each iteration resp. execution of the loop body &lt;b&gt;reduces&lt;/b&gt; its value (strictly monotonically decreasing)&lt;/li&gt;
&lt;li&gt;the loop condition is &lt;i&gt;false&lt;/i&gt; when τ = 0&lt;/li&gt;
&lt;li&gt;τ is the upper boundary for the loop iterations that are left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If a termination function is known a &lt;b&gt;termination rule&lt;/b&gt; can be used:
&lt;img src="https://schoettkr.github.io/knowledge-database/images/termination-rule.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
So &lt;b&gt;if&lt;/b&gt; a termination function is &lt;i&gt;strictly monotonically decreasing&lt;/i&gt; &lt;b&gt;and&lt;/b&gt; the value 0 leads to the end of the loop &lt;b&gt;and&lt;/b&gt; the loop body terminates, &lt;b&gt;then&lt;/b&gt; the loop &lt;b&gt;terminates&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
So this has to be shown:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;strictly monotonically decrease of τ&lt;/li&gt;
&lt;li&gt;the implication that the loop condition B is not met at the lowest τ&lt;/li&gt;
&lt;li&gt;the termination of the body P&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Example of a termination function for a loop that calculates the square of a nonnegative integer:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* { Input: 0 &amp;lt;= a} */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* { Output: x = a^2} */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Pick the termination function τ = a - y
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;τ is decremented in each iteration, since 'y' is incremented and 'a' is constant&lt;/li&gt;
&lt;li&gt;if τ = 0 then y = a therefore the loop condition y != a evaluates to &lt;i&gt;false&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;the loop body does not contain recursions, gotos or other loops, termination is therefore trivial&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
→ The loop terminates!
&lt;/p&gt;

&lt;p&gt;
To prove the termination of recursions the same procedure as with loops can be applied. A termination function τ is created that gets smaller with increasing recursion depth. The following has to apply:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;the values are natural numbers (incl 0)&lt;/li&gt;
&lt;li&gt;the value of τ decreases with each method call (recursion)&lt;/li&gt;
&lt;li&gt;discontinuation is forced at τ = 0 (or earlier)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Fibonacci Example */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
However proving termination is not always possible (eg golbachs conjecture for expressing integers as sum of primes)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>A&amp;P</category><category>university</category><guid>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-14/</guid><pubDate>Fri, 23 Nov 2018 23:00:00 GMT</pubDate></item><item><title>Computer Science I - Lecture 07</title><link>https://schoettkr.github.io/knowledge-database/posts/computer_science_I/cs-I-07/</link><dc:creator>schoettkr</dc:creator><description>&lt;p&gt;
&lt;b&gt;Disclaimer:&lt;/b&gt; &lt;i&gt;I was not able to attend this and next weeks lectures that take place on friday because I am required to attend some course at another university in another city. That means that the blog posts 7th and 8th Computer Science I lecture and the blog posts to the 14th and 16th Algorithms &amp;amp; Programming lecture is not supplemented by the notes I usually take during the lecture. Also the slides that I cover in each post may be a bit off from what was actually covered (especially in CS01 because I "guess" what we covered, while for A&amp;amp;P a classmate hands me the covered slides)&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
Okay so I'll continute based on where we left off last time, which leads us to the next chapter in the slides:
&lt;/p&gt;

&lt;div id="outline-container-orgff2f2d4" class="outline-2"&gt;
&lt;h2 id="orgff2f2d4"&gt;Functions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgff2f2d4"&gt;
&lt;p&gt;
To be honest, while scimming through this lecture chapter I found it to be pretty basic. It is imho not worth it to cover here because there is nothing new in comparison to what we already covered in the A&amp;amp;P lectures, so look there if you want to refresh your memory on:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;why we use functions&lt;/li&gt;
&lt;li&gt;how to use functions&lt;/li&gt;
&lt;li&gt;domain (Definitionsmenge/Definitionsbereich) and codomain (Zielmenge/Wertebereich)&lt;/li&gt;
&lt;li&gt;return values&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://schoettkr.github.io/knowledge-database/posts/computer_science_I/cs-I-07/</guid><pubDate>Thu, 22 Nov 2018 23:00:00 GMT</pubDate></item><item><title>Database Essentials - Lecture 05</title><link>https://schoettkr.github.io/knowledge-database/posts/database_essentials/db-essentials-05/</link><dc:creator>schoettkr</dc:creator><description>&lt;div id="outline-container-orgbec6786" class="outline-2"&gt;
&lt;h2 id="orgbec6786"&gt;Relational Calculus (Relationenkalkül)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbec6786"&gt;
&lt;p&gt;
The expressions in &lt;i&gt;relational algebra&lt;/i&gt; form a procedural way of describing the way to an result. The resulting relation is in turn derived from intermediate relation results. This way describes they way of &lt;i&gt;how&lt;/i&gt; you come to the relation result.
&lt;/p&gt;

&lt;p&gt;
There is an alternative however to describe a query result without specifying the derivation (Herleitungsvorschrift), which is called &lt;b&gt;relational calculus&lt;/b&gt;. In relational calculus only the requirements of the desired resulting tuples are specified/described but not the way they are retrieved. This way describes &lt;i&gt;what&lt;/i&gt; is contained in the result relation.
&lt;/p&gt;

&lt;p&gt;
A calculus (Kalkül) is a method, that is determined by a set of rules, to deal with certain mathematical problems in a systematic manner and solve them automatically (slides: ist eine durch ein System von Regeln festgelegte Methode, mit deren Hilfe bestimmte mathematische Probleme systematisch behandelt und automatisch gelöst werden können) 
&lt;/p&gt;

&lt;p&gt;
The basis for relational calculus is predicate/quantifier logic  of the first degree (Prädikatenlogik erster Ordnung) and the result of a query is a set of tuples. In relational calculus calculus expressions (Kalkülausdrücke) are used, in particular the &lt;b&gt;tuple calculus&lt;/b&gt; and the &lt;b&gt;domain calculus&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgaeab930" class="outline-3"&gt;
&lt;h3 id="orgaeab930"&gt;Tuple Calculus&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaeab930"&gt;
&lt;p&gt;
The query notation for tuple calculus is {t | P(t)} where t is a tuple variable and P is a predicate over t. The result of such query is a set of all tuples for which the evaluation of the predicate P(t) yields &lt;i&gt;true&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
Take the following example relation "Student":
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;matrNr{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;major&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123456&lt;/td&gt;
&lt;td class="org-left"&gt;Archimedes&lt;/td&gt;
&lt;td class="org-left"&gt;Computer Science&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;134534&lt;/td&gt;
&lt;td class="org-left"&gt;Sophokles&lt;/td&gt;
&lt;td class="org-left"&gt;Philosophy&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;145698&lt;/td&gt;
&lt;td class="org-left"&gt;Cleopatra&lt;/td&gt;
&lt;td class="org-left"&gt;Computer Science&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Query: {s | s ∈ Student ∧ s.major='Computer Science'}
&lt;/p&gt;

&lt;p&gt;
Result: 
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;matrNr{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;major&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123456&lt;/td&gt;
&lt;td class="org-left"&gt;Archimedes&lt;/td&gt;
&lt;td class="org-left"&gt;Computer Science&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;145698&lt;/td&gt;
&lt;td class="org-left"&gt;Cleopatra&lt;/td&gt;
&lt;td class="org-left"&gt;Computer Science&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgd35aced"&gt;&lt;/a&gt;Tuple Calculus - Atoms and Formulas&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgd35aced"&gt;
&lt;p&gt;
For the construction of formula we define sets of atomic formulas.
&lt;b&gt;Atoms&lt;/b&gt; in tuple calculus:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;t&lt;sub&gt;i&lt;/sub&gt; ∈ R&lt;sub&gt;j&lt;/sub&gt; → the relation R&lt;sub&gt;j&lt;/sub&gt; is assigned as the codomain(Wertebereich) to the tuple variable t&lt;sub&gt;i&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;t&lt;sub&gt;i.A&lt;/sub&gt; Θ t&lt;sub&gt;j.B&lt;/sub&gt; → comparison operation between two attributes A and B which are attributes of the relations that were assigned as codomains to t&lt;sub&gt;i&lt;/sub&gt; and t&lt;sub&gt;j&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;t&lt;sub&gt;i.A&lt;/sub&gt; Θ c → comparison operation between attribute A and constant C&lt;/li&gt;
&lt;li&gt;c Θ t&lt;sub&gt;i.A&lt;/sub&gt; → comparison operation between constant c and attribute A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The comparison operation denoted by Θ encompasses the usual comparison operators that are valid on the respective attribute domains. Usually these are &amp;lt;, &amp;gt;, ≤, ≥, =, ≠ and =, ≠ for boolean values.
&lt;/p&gt;

&lt;p&gt;
Every atom is a &lt;i&gt;formula&lt;/i&gt;. When F&lt;sub&gt;1&lt;/sub&gt; and F&lt;sub&gt;2&lt;/sub&gt; are formulas then the following constructs are formulas as well:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;F&lt;sub&gt;1&lt;/sub&gt; ∧ F&lt;sub&gt;2&lt;/sub&gt; = Conjunction&lt;/li&gt;
&lt;li&gt;F&lt;sub&gt;1&lt;/sub&gt; ∨ F&lt;sub&gt;2&lt;/sub&gt; = Disjunction&lt;/li&gt;
&lt;li&gt;¬ F&lt;sub&gt;1&lt;/sub&gt;  = Negation&lt;/li&gt;
&lt;li&gt;(F&lt;sub&gt;1&lt;/sub&gt;) = wrapping (Klammerung)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
When F is a formula and t is a tuple variable in F then the following constructs are formulas:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;(∃ t)(F) = existential quantifier (Existenzquantifizierung)&lt;/li&gt;
&lt;li&gt;(∀ t)(F) = universal quantifier (Universalquantifizierung)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgfb47392"&gt;&lt;/a&gt;Tuple Calculus - Free and Bounded Tuple Variables&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgfb47392"&gt;
&lt;p&gt;
A tuple variable in an atom (respective in a formula consisting of one atom) is &lt;b&gt;free&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
A tuple variable in a formula that is composed via negation, conjunction or disconjuction of other partial formulas is &lt;b&gt;free&lt;/b&gt; or &lt;b&gt;bound&lt;/b&gt; depending on its state in the other partial formulas. In this case a tuple variable can be free and bound at the same time.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Free&lt;/b&gt; tuple variables t of a formula F get &lt;b&gt;bound&lt;/b&gt; to the respective quantifier F' when they are embedded in one of the following formulas F':
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;F' = (∃ t)(F)&lt;/li&gt;
&lt;li&gt;F' = (∀ t)(F)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;F&lt;sub&gt;1&lt;/sub&gt;: s.name = 'Cleopatra'&lt;/li&gt;
&lt;li&gt;F&lt;sub&gt;2&lt;/sub&gt;: (∃ t)(s.matrNr = t.matrNr)&lt;/li&gt;
&lt;li&gt;F&lt;sub&gt;3&lt;/sub&gt;: (∀ s)(s.name = 'Cleopatra')&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org60984c5"&gt;&lt;/a&gt;Tuple Calculus - Computing Formulas (Substitution)&lt;br&gt;
&lt;div class="outline-text-5" id="text-org60984c5"&gt;
&lt;p&gt;
Given that F(s) is a formula with the tuple variable s ∈ R and a tuple t ∈ R. Then the following happens in each atom of F(S) with a &lt;i&gt;free&lt;/i&gt; s:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;s ∈ R is replaced with true&lt;/li&gt;
&lt;li&gt;s.A Θ u.B is replaced with t.A Θ u.B (A and B are atrtibutes, u is another tuple variable u ≠ s)&lt;/li&gt;
&lt;li&gt;s.A Θ c is replaced with the concrete boolean value of the operation t.A Θ c&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
These steps are repeated for further tuple variables if necessary until F(s) only holds (possibly logically connected) boolean constants (true/false) and atoms with bound variables.
&lt;/p&gt;

&lt;p&gt;
Example:
Given tuple variable s and t from a schema R(a,b) and the formula ∀ t(t ∈ R ∧ t.a = s.a ∧ t.b &amp;lt; s.b) the substitution happens/looks like this:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the tuple s = (8, 12) → ∀ t(t ∈ R ∧ t.a = 8 ∧ t.b &amp;lt; 12)&lt;/li&gt;
&lt;li&gt;then the tuple t = (8, 9) → ∀ t(true ∧ 8 = 8 ∧ 9 &amp;lt; 12) → ∀ t(true ∧ true ∧ true) → ∀ t(true)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orga48ad2d"&gt;&lt;/a&gt;Tuple Calculus - Computing Formulas for bound Tuple Variables&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga48ad2d"&gt;
&lt;p&gt;
Given a tuple variable s ∈ R:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the formula (∃ t)(F) evaluates to &lt;i&gt;true&lt;/i&gt; if F becomes true for at least one substitution of s and the formula evaluates to false otherwise
&lt;ul class="org-ul"&gt;
&lt;li&gt;this means that at least one tuple can be associated with the free tuple variable s for which F becomes true&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the formular (∀ t)(F) evaluates to &lt;i&gt;true&lt;/i&gt; if F becomes true for &lt;i&gt;all&lt;/i&gt; substitutions of s
&lt;ul class="org-ul"&gt;
&lt;li&gt;this means that F is true/fulfilled for all tuples that can be assigned to the free tuple variable s&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;Final Formula Computation&lt;/b&gt; = formulas now only hold logically connected boolean values which can be evaluated accordingly.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgd659ffd"&gt;&lt;/a&gt;Tuple Calculus - Expressions and Queries&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgd659ffd"&gt;
&lt;p&gt;
In general an expression/query of the tuple calculus is of the following form: {t&lt;sub&gt;1.A&lt;/sub&gt;&lt;sub&gt;1&lt;/sub&gt;, t&lt;sub&gt;2.A&lt;/sub&gt;&lt;sub&gt;2&lt;/sub&gt;, …, t&lt;sub&gt;n.A&lt;/sub&gt;&lt;sub&gt;n&lt;/sub&gt; | F(t&lt;sub&gt;1&lt;/sub&gt;, …, t&lt;sub&gt;m&lt;/sub&gt;)}
&lt;/p&gt;

&lt;p&gt;
t&lt;sub&gt;i&lt;/sub&gt; are tuple variables (which in general encompass all tuples of the so called univesere, that's why they are usually assigned to a relation) and A&lt;sub&gt;i&lt;/sub&gt; are attributes of the relation that is assigned to the tuple variable t&lt;sub&gt;i&lt;/sub&gt;, while F(t&lt;sub&gt;1&lt;/sub&gt;, …, t&lt;sub&gt;m&lt;/sub&gt;) is the formula of the tuple calculus.
&lt;/p&gt;

&lt;p&gt;
Taking our previous student relation:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;matrNr{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;major&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123456&lt;/td&gt;
&lt;td class="org-left"&gt;Archimedes&lt;/td&gt;
&lt;td class="org-left"&gt;Computer Science&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;134534&lt;/td&gt;
&lt;td class="org-left"&gt;Sophokles&lt;/td&gt;
&lt;td class="org-left"&gt;Philosophy&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;145698&lt;/td&gt;
&lt;td class="org-left"&gt;Cleopatra&lt;/td&gt;
&lt;td class="org-left"&gt;Computer Science&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Query: {s.matrNr, s.name | s ∈ Student ∧ s.major='Philosophy'} yields
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;matrNr{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;134534&lt;/td&gt;
&lt;td class="org-left"&gt;Sophokles&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;p&gt;
Now onto another example. Given the relations teacher
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;persNr{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;3467&lt;/td&gt;
&lt;td class="org-left"&gt;Ares&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;td class="org-left"&gt;Zeus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;43467&lt;/td&gt;
&lt;td class="org-left"&gt;Hera&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
and lectures
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;persNr{FK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;43467&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;456&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
we want to know the names of the teachers that hold at least one lecture:
{t.name | t ∈ Teacher ∧ (∃ l)(l ∈ lectures ∧ t.persNr = l.persNr)} which leads to this resulting relation
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Zeus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Hera&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;p&gt;
To query the lecture titles of lectures given by Zeus we'd use the following:
{t.title | t ∈ Lectures ∧ (∃ l)(l ∈ teacher ∧ t.persNr = l.persNr ∧ l.name='Zeus') } to get
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;p&gt;
For the next example queries I embed the slides because it is more clearer and not so much overhead.
&lt;img src="https://schoettkr.github.io/knowledge-database/images/tuple-calc-ex1.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/tuple-calc-ex2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
One problem with queries of tuple calculus is that they can sometimes produce an infinite result relation, eg { s | ≠(s ∈ Student) }.
&lt;/p&gt;

&lt;p&gt;
The domain of a formula contains all constant values of a formula and all possible attribute values of all tuples in the referenced relations.
&lt;/p&gt;

&lt;p&gt;
A &lt;b&gt;safe query&lt;/b&gt; is a query where the result of the query stems from the domain of the formula → we only use safe queries (all queries we've seen so far are safe).
&lt;/p&gt;

&lt;p&gt;
Also see &lt;a href="https://en.wikipedia.org/wiki/Tuple_relational_calculus"&gt;https://en.wikipedia.org/wiki/Tuple_relational_calculus&lt;/a&gt; for more
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org065eceb" class="outline-3"&gt;
&lt;h3 id="org065eceb"&gt;Domain Calculus&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org065eceb"&gt;
&lt;p&gt;
The domain relational calculus is also a calculus that serves as a declarative database query language for the relational data model. In DRC queries have this form {d&lt;sub&gt;1&lt;/sub&gt;, d&lt;sub&gt;2&lt;/sub&gt;, …, d&lt;sub&gt;n&lt;/sub&gt; | F(d&lt;sub&gt;1&lt;/sub&gt;, d&lt;sub&gt;2&lt;/sub&gt;, …, d&lt;sub&gt;m&lt;/sub&gt;)} with m ≥ n where d&lt;sub&gt;i&lt;/sub&gt; are domain variables which describe the values of attribute domains and F(d&lt;sub&gt;1&lt;/sub&gt;, d&lt;sub&gt;2&lt;/sub&gt;, …, d&lt;sub&gt;m&lt;/sub&gt;) is the formula. The formula consists, like in the relational calculus (tuple?), of either a an atom, a logical connection of formulas or a formula with a domain variable which is existential quantified or universal quantified.
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org3529dfd"&gt;&lt;/a&gt;Domain Calculus - Atoms and Comparison&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3529dfd"&gt;
&lt;p&gt;
Given the relation R of degree n where every d&lt;sub&gt;i&lt;/sub&gt; is a domain variable, the atom \(R(d_1, d_2, ..., d_n)\) expresses that the codomain (Werteliste) &amp;lt;d&lt;sub&gt;1&lt;/sub&gt;, d&lt;sub&gt;2&lt;/sub&gt;, …, d&lt;sub&gt;n&lt;/sub&gt;&amp;gt; has to be a tuple of the relation R.
&lt;/p&gt;

&lt;p&gt;
Comparisons
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;d&lt;sub&gt;i&lt;/sub&gt; θ d&lt;sub&gt;j&lt;/sub&gt; → comparison operation between two domain variables d&lt;sub&gt;i&lt;/sub&gt; and d&lt;sub&gt;j&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;d&lt;sub&gt;i&lt;/sub&gt; θ c → comparison operation between domain variable d&lt;sub&gt;i&lt;/sub&gt; and constant c&lt;/li&gt;
&lt;li&gt;c θ d&lt;sub&gt;i&lt;/sub&gt; → comparison operation between constant c and domain variable d&lt;sub&gt;i&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The comparison operation denoted by Θ encompasses the usual comparison operators that are valid on the respective attribute domains. Usually these are &amp;lt;, &amp;gt;, ≤, ≥, =, ≠ and =, ≠ for boolean values (required that the elements of the domain can be compared pairwise).
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org8e57725"&gt;&lt;/a&gt;Domain Calculus - Example Queries&lt;br&gt;
&lt;div class="outline-text-5" id="text-org8e57725"&gt;
&lt;p&gt;
Given the relations teacher
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;persNr{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;43467&lt;/td&gt;
&lt;td class="org-left"&gt;Ares&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;td class="org-left"&gt;Zeus&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;43424&lt;/td&gt;
&lt;td class="org-left"&gt;Hera&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
and lectures
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;persNr{FK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;43467&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;456&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
&lt;b&gt;1.)&lt;/b&gt; List the lecture titles that are held by teacher with persNr 6897?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The query {b | (∃ a) (∃ c) (Lecture(a,b,c) ∧ c=6897)} yields:&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
&lt;b&gt;2.)&lt;/b&gt; What are the numbers and titles of lectures held by Zeus?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The query {a, b | (∃ c) (∃ d) (∃ e) (Lecture(a,b,c) ∧ teacher(d,e) ∧ c=d ∧ e='Zeus')} yields:&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;456&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
&lt;b&gt;3.)&lt;/b&gt; What's the title of lectures hold by teacher with persNr6987 with at least 5 Credits?
&lt;/p&gt;

&lt;p&gt;
We now have an additional column in our lecture relation:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;number{PK}&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;credits&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;persNr{FK}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;123&lt;/td&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;234&lt;/td&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;345&lt;/td&gt;
&lt;td class="org-left"&gt;Database Essentials&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;43467&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;456&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise Data Structures&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;6897&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Alternatively a query can be formulated with a direct specification of constant attribute values: {b | (Lecture(a, b, &lt;i&gt;5&lt;/i&gt;, &lt;i&gt;6897&lt;/i&gt;))} which yields
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Data Structures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Databases in Praxis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
(slides: alle Variablen, die nicht „links“ auftreten, sind hierbei automatisch existenzquantifiziert)
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00f3352" class="outline-2"&gt;
&lt;h2 id="org00f3352"&gt;Relational Languages&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org00f3352"&gt;
&lt;p&gt;
The following query languages possess the same expresiveness (Ausdrucksmächtigkeit):
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;relational algebra&lt;/li&gt;
&lt;li&gt;tuple calculus (limited to safe queries)&lt;/li&gt;
&lt;li&gt;domain calculus (limited to safe queries)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Queries can be converted between those languages at any time.
&lt;/p&gt;

&lt;p&gt;
In praxis the &lt;b&gt;relational calculus&lt;/b&gt; is the foundation for "real" query languages of relational DBMS:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;tuple calculus is the foundation of SQL (Structured Query Language)&lt;/li&gt;
&lt;li&gt;domain calculus is the foundation of QBE (Query By Example)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;Relational algebgra&lt;/b&gt; is the foundation for the realisation of queries in the query languages. The sequence of operations describes the path to the result of a query (which can be optimized in some circumstances).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org805185e" class="outline-2"&gt;
&lt;h2 id="org805185e"&gt;Introduction to SQL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org805185e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge8aa45d" class="outline-4"&gt;
&lt;h4 id="orge8aa45d"&gt;History&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge8aa45d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;1970: Codd presents the relational model&lt;/li&gt;
&lt;li&gt;1974: development of the relational query language SEQUEL (Structured English Query Language)&lt;/li&gt;
&lt;li&gt;1976: further development (Weiterentwicklung) of SEQUEL served as a foundation of the DBMS prototype "System R" by IBM, which was later renamed to SQL (Structured Query Language)&lt;/li&gt;
&lt;li&gt;in the early 80s: a lot of DBMS emerge by different commercial providers → standardization is needed&lt;/li&gt;
&lt;li&gt;1987: first SQL Standard&lt;/li&gt;
&lt;li&gt;1992: big expansion of the standard → SQL 2 (SQL-92)&lt;/li&gt;
&lt;li&gt;since then continuous evolution: SQL-99 → SQL:2003 → SQL:2006 → SQL:2008 → SQL:2011&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org655834a" class="outline-4"&gt;
&lt;h4 id="org655834a"&gt;Introduction to SQL - Components&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org655834a"&gt;
&lt;p&gt;
There two high level components of SQL:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Data Definition Language (DDL)&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;defines the database structure&lt;/li&gt;
&lt;li&gt;manages the access rights to the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Data Manipulation Language (DML)&lt;/b&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;used to formulate queries for the data sets&lt;/li&gt;
&lt;li&gt;create, read, update, delete of data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
For now we'll focus on the Data Manipulation Language.
&lt;/p&gt;

&lt;p&gt;
SQL does not operate on relations, but rather their physical representation form which are &lt;b&gt;tables&lt;/b&gt;. In tables duplicate entries are possible which we may have to exclude. In contrast to relations there is one more advantage to table which is that they can be sorted.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0310734" class="outline-4"&gt;
&lt;h4 id="org0310734"&gt;Introduction to SQL - Queries&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0310734"&gt;
&lt;p&gt;
All queries to a database in SQL are realized via the &lt;code&gt;select&lt;/code&gt; statement.
This is the general construction:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; &lt;code&gt;attribute|expression&lt;/code&gt; → which attributes should the result table contain?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt; &lt;code&gt;list of tables&lt;/code&gt; → which tables are required for the query?&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;where&lt;/code&gt;  &lt;code&gt;condition&lt;/code&gt; ] → which conditions should the result tuples fulfill?&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;group by&lt;/code&gt;  &lt;code&gt;list of attributes&lt;/code&gt; ] → summarize/condense identical attribute values&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;having&lt;/code&gt;  &lt;code&gt;condition&lt;/code&gt; ] → condition in regards to grouped tables&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
[ &lt;code&gt;order by&lt;/code&gt;  &lt;code&gt;sort&lt;/code&gt; ] → specification of sorting for the resulting table
&lt;/p&gt;

&lt;p&gt;
Now let's look at some simple example queries (mostly π projection and \roh rename at one point):
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I insert the slides here because they are visually more appealing/clear :D
&lt;/p&gt;

&lt;p&gt;
Three simple queries:
&lt;img src="https://schoettkr.github.io/knowledge-database/images/simple-sql-1.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/simple-sql-2.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/simple-sql-3.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Sorting:
&lt;img src="https://schoettkr.github.io/knowledge-database/images/simple-sql-4.png" alt="nil"&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/simple-sql-5.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Simple query with &lt;i&gt;distinct&lt;/i&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/simple-sql-6.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://schoettkr.github.io/knowledge-database/posts/database_essentials/db-essentials-05/</guid><pubDate>Tue, 20 Nov 2018 23:00:00 GMT</pubDate></item><item><title>Algos &amp; Programming - Lecture 13</title><link>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-13/</link><dc:creator>schoettkr</dc:creator><description>&lt;div id="outline-container-org8c4d7fa" class="outline-2"&gt;
&lt;h2 id="org8c4d7fa"&gt;Design and Correctness of Algorithms&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8c4d7fa"&gt;
&lt;p&gt;
The first slides of this lecture chapter is just some meta information about the right mindset to create algorithms, which I find to be trivial, that's why I don't repeat that here (slides 1-5).
&lt;/p&gt;

&lt;p&gt;
We usually create a model for a problem (Modellierung) to abstract and reduce it. Especially mathematical concepts are suited as modeling approaches (Modellierungsansätze):
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;sets, multisets&lt;/li&gt;
&lt;li&gt;permutations&lt;/li&gt;
&lt;li&gt;trees/hierarchies&lt;/li&gt;
&lt;li&gt;graphs&lt;/li&gt;
&lt;li&gt;points (geometry)&lt;/li&gt;
&lt;li&gt;polygons&lt;/li&gt;
&lt;li&gt;strings&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga3744c0" class="outline-3"&gt;
&lt;h3 id="orga3744c0"&gt;Excourse: Graphs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga3744c0"&gt;
&lt;p&gt;
Graphs are often used for modelling. A graph is a ordered pair \((V,E)\), where \(V\) is a set of nodes/vertices (Knoten) \(V = {v_1, v_2, v_3,.., v_n}\) and \(E\) is a set of edges (Kanten/Linien) \(E = {e_1, e_2, .., e_m}\). Depending on the type of graph, \(E\) is:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;in &lt;b&gt;undirected*/*simple&lt;/b&gt; (ungerichtete) graphs &lt;b&gt;without multiple edges&lt;/b&gt; \(E\) is a &lt;b&gt;2-element subset&lt;/b&gt; of \(V\)&lt;/li&gt;
&lt;li&gt;in &lt;b&gt;directed&lt;/b&gt; (gerichteten) graphs &lt;b&gt;without multiple edges&lt;/b&gt; \(E\) is a &lt;b&gt;subset&lt;/b&gt; of all pairs/2-tuples (i,j) which result from the cartesian product of \(V * V\)&lt;/li&gt;
&lt;li&gt;in &lt;b&gt;undirected&lt;/b&gt; graphs with "zusammengefassten" &lt;b&gt;multiple edges&lt;/b&gt; (=Multigraph) \(E\) is a &lt;b&gt;multiset&lt;/b&gt; (Menge die Duplikate erlaubt) "über die Menge \(W\)" of all &lt;b&gt;2-element subsets&lt;/b&gt; of \(V\) (?weighted graph?)&lt;/li&gt;
&lt;li&gt;in &lt;b&gt;directed&lt;/b&gt; graphs with "zusammengefassten" &lt;b&gt;multiple edges&lt;/b&gt; (=Multigraph) \(E\) is a &lt;b&gt;multiset&lt;/b&gt;  "über dem kartesischen Produkt \(V * V\)" (?weighted graph?)&lt;/li&gt;
&lt;li&gt;in &lt;b&gt;hypergraphs&lt;/b&gt; \(E\) is a subset of the power set of \(V\)&lt;/li&gt;
&lt;li&gt;wiki: in gerichteten Graphen mit eigenständigen Mehrfachkanten eine beliebige Menge, deren Elemente mit Hilfe von zwei Funktionen {\displaystyle \mathrm {src} ,\mathrm {tgt} : E→ V} {\mathrm  {src}},{\mathrm  {tgt}}: E→ V die den Elementen einen Quell- bzw. Zielknoten zuordnen, als Kanten angesehen werden (so ein Graph ist dasselbe wie ein Funktor {\displaystyle G: {\mathcal {G}}→ \mathbf {Set} } G: {\mathcal  G}→ {\mathbf  {Set}}, wobei {\displaystyle {\mathcal {G}}} {\mathcal  G} die recht überschaubare Kategorie {\displaystyle {\mathcal {G}}=\{V{\stackrel {\mathrm {src} }{\longleftarrow }}E{\stackrel {\mathrm {tgt} }{\longrightarrow }}V\}} {\mathcal  G}=\{V{\stackrel  {{\mathrm  {src}}}\longleftarrow }E{\stackrel  {{\mathrm  {tgt}}}\longrightarrow }V\} mit zwei Objekten und zwei ausgezeichneten Pfeilen ist)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Slides: Kanten können Werte (Gewichte) zugewiesen werden, w : E → R. In diesem Fall spricht man von einem gewichteten Graph.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;gerichteter&lt;/i&gt; Graph hat Pfeile an Kanten die die Richtung angeben&lt;/li&gt;
&lt;li&gt;&lt;i&gt;gewichteter&lt;/i&gt; Graph hat Werte an Kanten stehen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Two blog posts on graphs:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8"&gt;https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/basecs/from-theory-to-practice-representing-graphs-cfd782c5be38"&gt;https://medium.com/basecs/from-theory-to-practice-representing-graphs-cfd782c5be38&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The model of the graph is seperate of any concrete data structures. C for example does not have a built-in data type for graphs so you might need to implement one yourself. Furthermore just because a problem was modeled with a specific approach/model does not mean that a respective data structure is always needed to implement the approach.
&lt;/p&gt;

&lt;p&gt;
However if you find yourself in the need of such data structure there are a multitude of approaches to implement it such. Here are two:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;via &lt;b&gt;adjacency matrix&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;a square matrix to represent a finite graph&lt;/li&gt;
&lt;li&gt;the elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph&lt;/li&gt;
&lt;li&gt;in 2d array each element &lt;code&gt;a_{i,j}&lt;/code&gt; holds information weather or not an edge connects the vertices &lt;code&gt;v_i&lt;/code&gt; and &lt;code&gt;v_j&lt;/code&gt; or which weight the edge has:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; edge between verticle 0 and verticle 1 exists&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;via &lt;b&gt;structs and pointers&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;vertices can be modelled as structs and edges as pointers inside of those:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;maxDegree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxDegree&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxDegree&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;node_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Since graph theory is a relatively old field of mathematics there are a lot of theorems, laws and standard algorithms for solving certain problems.
&lt;/p&gt;

&lt;p style="color:red;"&gt;
TODO check those code examples
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org38e59ea" class="outline-3"&gt;
&lt;h3 id="org38e59ea"&gt;Specification&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org38e59ea"&gt;
&lt;p style="color:red;"&gt;
TODO check those code examples
&lt;/p&gt;

&lt;p&gt;
An algorithm has to be described somehow. One variant to do so would be in a concrete programming language. The problem with that is that different programming languages know different concepts and no programming language knows all concepts. C for example does not know data types and operations for mathematical sets by itself. Set operations in C could therefore look a bit unclear and obfuscate (verschleiern) the underlying algorithm which is the real point of interest.
&lt;/p&gt;

&lt;p&gt;
A solution to this is writing algorithms in a &lt;i&gt;specification&lt;/i&gt; (Spezifikationsprachen) of which there are many (natural languages are too inprecise btw) when the algorithm itself is the point of interest. 
&lt;/p&gt;

&lt;p&gt;
There are &lt;b&gt;formal&lt;/b&gt; and &lt;b&gt;semiformal&lt;/b&gt; specification languages. The former are automatically processable for example theorem proofs, however these are often hard to read. The latter serve the purpose of communicating about algorithms.
&lt;/p&gt;

&lt;p&gt;
We'll use the probably most popular semiformal specification language for imperative algorithms which is &lt;b&gt;pseudocode&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
And this (pseudocode) is where we will continue in the next lecture. Cya :)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>A&amp;P</category><category>university</category><guid>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-13/</guid><pubDate>Sun, 18 Nov 2018 23:00:00 GMT</pubDate></item><item><title>Algos &amp; Programming - Lecture 12</title><link>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-12/</link><dc:creator>schoettkr</dc:creator><description>&lt;div id="outline-container-org9e75314" class="outline-2"&gt;
&lt;h2 id="org9e75314"&gt;Bit Operators&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9e75314"&gt;
&lt;p&gt;
In this lecture we started by covering bit operators. I've also written about those &lt;a href="https://schoettkr.github.io/knowledge-database/posts/computer_science_I/cs-I-03/"&gt;here&lt;/a&gt;. To keep it short (look at the link for more detailed explainations):
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; bitwise &lt;b&gt;and&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; bitwise &lt;b&gt;or&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; bitwise &lt;b&gt;not&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; bitwise &lt;b&gt;xor&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/bitwise-op.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Then there are the bitshift operators as well:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;8 &amp;lt;&amp;lt; n&lt;/code&gt; leftshift which is like multiplication with 2&lt;sup&gt;n&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8 &amp;gt;&amp;gt; n&lt;/code&gt; rightshift which is like division with 2&lt;sup&gt;n&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There are more operators in C. Some of them offer a shorter/more concise notation. The lecturer calls them "Faulheitsoperatoren" (lazy operators) I don't like that term because it can get mixed with "lazy evaluation" (which is called short circuit evaluatoin to be precise) rather easily. So I'll now just go over the operators we covered in the lecture next.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2bceece" class="outline-2"&gt;
&lt;h2 id="org2bceece"&gt;Comma Operator&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2bceece"&gt;
&lt;p&gt;
The wikipedia page on this operator is very well written, I have copied the valuable information to here:
&lt;/p&gt;

&lt;p&gt;
In the C and C++ programming languages, the comma operator (represented by the token &lt;code&gt;,&lt;/code&gt;) is a &lt;b&gt;binary operator&lt;/b&gt; that evaluates its first operand and discards the result, and then evaluates the second operand and returns this value (and type).
&lt;/p&gt;

&lt;p&gt;
The use of the comma token as an operator is distinct from its use in function calls and definitions, variable declarations, enum declarations, and similar constructs, where it acts as a separator.
&lt;/p&gt;

&lt;p&gt;
The comma operator separates expressions (which have value) in a way analogous to how the semicolon terminates statements, and sequences of expressions are enclosed in parentheses analogously to how sequences of statements are enclosed in braces: &lt;code&gt;(a, b, c)&lt;/code&gt; is a sequence of expressions, separated by commas, which evaluates to the last expression &lt;code&gt;c&lt;/code&gt; while &lt;code&gt;{a; b; c;}&lt;/code&gt; is a sequence of statements, and does not evaluate to any value. A comma can only occur between two expressions – commas separate expressions – unlike the semicolon, which occurs at the end of a (non-block) statement – semicolons terminate statements.
&lt;/p&gt;

&lt;p&gt;
The comma operator has the lowest precedence of any C operator, and acts as a sequence point. In a combination of commas and semicolons, semicolons have lower precedence than commas, as semicolons separate statements but commas occur within statements, which accords with their use as ordinary punctuation: &lt;code&gt;a, b; c, d&lt;/code&gt; is grouped as &lt;code&gt;(a, b); (c, d)&lt;/code&gt; because these are two separate statements.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Commas act as separators in this line, not as an operator.&lt;/span&gt;
&lt;span class="cm"&gt; *  Results: a=1, b=2, c=3, i=0&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Assigns value of b into i.&lt;/span&gt;
&lt;span class="cm"&gt; *  Results: a=1, b=2, c=3, i=2&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// parens are required here because '=' has higher precedence than ',' it would get treated as (int i = a), (int b); without the parens which would be a redeclaration of b with no linkage          &lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Assigns value of a into i. Equivalent to (i = a), b;&lt;/span&gt;
&lt;span class="cm"&gt; *  Results: a=1, b=2, c=3, i=1&lt;/span&gt;
&lt;span class="cm"&gt; *  (The curly braces on the second line are needed to&lt;/span&gt;
&lt;span class="cm"&gt; *   avoid a compiler error.  The second 'b' declared&lt;/span&gt;
&lt;span class="cm"&gt; *   is given no initial value.)&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Increases value of a by 2, then assigns value of resulting operation a+b into i .&lt;/span&gt;
&lt;span class="cm"&gt; *  Results: a=3, b=2, c=3, i=5&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Increases value of a by 2, then stores value of a to i, and discards unused&lt;/span&gt;
&lt;span class="cm"&gt; *  values of resulting operation a + b . Equivalent to (i = (a += 2)), a + b; &lt;/span&gt;
&lt;span class="cm"&gt; *  Results: a=3, b=2, c=3, i=3&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Assigns value of a into i;  the following 'b' and 'c'&lt;/span&gt;
&lt;span class="cm"&gt; *  are not part of the initializer but declarators for&lt;/span&gt;
&lt;span class="cm"&gt; *  second instances of those variables.&lt;/span&gt;
&lt;span class="cm"&gt; *  Results: a=1, b=2, c=3, i=1&lt;/span&gt;
&lt;span class="cm"&gt; *  (The curly braces on the second line are needed to&lt;/span&gt;
&lt;span class="cm"&gt; *   avoid a compiler error.  The second 'b' and second&lt;/span&gt;
&lt;span class="cm"&gt; *   'c' declared are given no initial value.)&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;     
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Assigns value of c into i, discarding the unused a and b values.&lt;/span&gt;
&lt;span class="cm"&gt; *  Results: a=1, b=2, c=3, i=3&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Returns 6, not 4, since comma operator sequence points following the keyword &lt;/span&gt;
&lt;span class="cm"&gt; *  'return' are considered a single expression evaluating to rvalue of final &lt;/span&gt;
&lt;span class="cm"&gt; *  subexpression c=6 .&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Returns 3, not 1, for same reason as previous example, that is return expressions must be fully evaluated before the function can return.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Returns 3, not 1, still for same reason as above. This example works as it does&lt;/span&gt;
&lt;span class="cm"&gt; *  because return is a keyword, not a function call. Even though compilers will &lt;/span&gt;
&lt;span class="cm"&gt; *  allow for the construct return(value), the parentheses are only relative to "value"&lt;/span&gt;
&lt;span class="cm"&gt; *  and have no special effect on the return keyword.&lt;/span&gt;
&lt;span class="cm"&gt; *  Return simply gets an expression and here the expression is "(1), 2, 3".&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Use cases&lt;/b&gt;: The comma operator has relatively limited use cases. Because it discards its first operand, it is generally only useful where the first operand has desirable side effects. Further, because it is rarely used outside of specific idioms, and easily mistaken with other commas or the semicolon, it is potentially confusing and error-prone. Nevertheless, there are certain circumstances where it is commonly used, notably in for loops and in SFINAE. For embedded systems which may have limited debugging capabilities, the comma operator can be used in combination with a macro to seamlessly override a function call, to insert code just before the function call.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;For Loops&lt;/i&gt;:
&lt;/p&gt;

&lt;p&gt;
The most common use is to allow multiple assignment statements without using a block statement, primarily in the initialization and the increment expressions of a for loop. This is the only idiomatic use in elementary C programming. In the following example, the order of the loop's initializers is significant:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// reverse print char array&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Outside of for loop initializers (which have a special use of semicolons), the comma might be used synonymously with the semicolon, particularly when the statements in question function similarly to a loop increment (e.g. at the end of a while loop):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Two statements on one line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
However, as this usage achieves the same thing as the semicolon in a visually different way, this is of dubious usefulness and might confuse readers.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Condition&lt;/i&gt;:
&lt;/p&gt;

&lt;p&gt;
The comma can be used within a condition (of an if, while, do while, or for) to allow auxiliary computations, particularly calling a function and using the result, with block scoping:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;// statements involving x and y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;i&gt;Complex return&lt;/i&gt;:
The comma can be used in return statements, to assign to a global variable or out parameter (passed by reference). This idiom suggests that the assignments are part of the return, rather than auxiliary assignments in a block that terminates with the actual return. For example, in setting a global error number:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EINVAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
This can be written more verbosely as:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EINVAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;i&gt;Avoid a block&lt;/i&gt;:
For brevity, the comma can be used to avoid a block and associated braces, as in:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
instead of:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9b592ea" class="outline-2"&gt;
&lt;h2 id="org9b592ea"&gt;Increment and Decrement Operator&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9b592ea"&gt;
&lt;p&gt;
Next up are &lt;code&gt;++&lt;/code&gt; increment and &lt;code&gt;--&lt;/code&gt; decrement operators which are unary operators that add or subtract one, to or from their operand. C like languages offer two versions (pre and post) of each operator with slighltly different semantics. Now guess what I've also written a bit about them &lt;a href="https://schoettkr.github.io/knowledge-database/posts/computer_science_I/cs-I-04/"&gt;here&lt;/a&gt; xD but that was a bit superficial so we'll repeat now.
&lt;/p&gt;

&lt;p&gt;
The increment operator increases, and the decrement operator decreases, the value of its operand by 1. The operand must have an arithmetic or pointer data type, and must refer to a modifiable data object. Pointers values are increased (or decreased) by an amount that makes them point to the next (or previous) element adjacent in memory → so eg incrementing a pointer via &lt;code&gt;++&lt;/code&gt; will increment it to point to the next element which would really be an incrementation of 8 when the base handled base type is a char for example.
&lt;/p&gt;

&lt;p&gt;
The &lt;b&gt;pre-increment&lt;/b&gt; and &lt;b&gt;pre-decrement&lt;/b&gt; operators increment (or decrement) their operand by 1, and the value of the expression is the resulting incremented (or decremented) value.
&lt;/p&gt;

&lt;p&gt;
The &lt;b&gt;post-increment&lt;/b&gt; and &lt;b&gt;post-decrement&lt;/b&gt; operators increase (or decrease) the value of their operand by 1, but the value of the expression is the operand's original value prior to the increment (or decrement) operation.
&lt;/p&gt;

&lt;p&gt;
Since the increment/decrement operator modifies its operand, use of such an operand more than once within the same expression can produce undefined results. For example, in expressions such as &lt;code&gt;x - ++x&lt;/code&gt;, it is not clear in what sequence the subtraction and increment operations should be performed. Such expressions generally invoke undefined behavior, and should be avoided.
&lt;/p&gt;

&lt;p&gt;
This example visualizes the difference between the post and prefix operators:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Increment operators&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// x is now 2, y is also 2&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// x is now 3, y is 2&lt;/span&gt;

&lt;span class="c1"&gt;// Decrement operators&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// x is now 2, y is 3&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// x is now 1, y is also 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If these shorthand operators are just used for their side effect (which is de-/in-crementing the variable for example in the third for loop statement) then it does not matter which variant post or pre is used.
&lt;/p&gt;

&lt;p&gt;
Easy peazy my friend :D 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org72e4534" class="outline-2"&gt;
&lt;h2 id="org72e4534"&gt;Compound Assignment Operators&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org72e4534"&gt;
&lt;p&gt;
The next type of operators we cover are called &lt;b&gt;compound assignment operators&lt;/b&gt; ('Selbstzuweisungsoperatoren' in script). The following table visualizes their effects:
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Operator name&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Syntax&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Addition assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a += b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a + b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Subtraction assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a -= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a - b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Multiplication assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a *= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a * b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Division assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a /= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a / b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Modulo assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a %= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a % b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bitwise AND assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a &amp;amp;= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a &amp;amp; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bitwise OR assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a ❘= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a ❘ b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bitwise XOR assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a ^= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a ^ b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bitwise leftshift assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a &amp;lt;&amp;lt;= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a &amp;lt;&amp;lt; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bitwise rightshift assignment&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a &amp;gt;&amp;gt;= b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;a = a &amp;gt;&amp;gt; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Be careful, while &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt; are somewhat common to see, the others might be confusing and it is okay to not use them as much.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbfaa6b9" class="outline-2"&gt;
&lt;h2 id="orgbfaa6b9"&gt;Operator Precedence and Associativity&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbfaa6b9"&gt;
&lt;p&gt;
When multiple operators are used in an expression, the evaluation order depends on the &lt;i&gt;precedence&lt;/i&gt; and / associativity/ of the operators.
&lt;/p&gt;

&lt;p&gt;
The &lt;b&gt;order of operations&lt;/b&gt; (or &lt;b&gt;operator precedence&lt;/b&gt;) is a collection of rules that reflect conventions about which procedures to perform first in order to evaluate a given mathematical expression.
&lt;/p&gt;

&lt;p&gt;
For example, in mathematics and most computer languages, multiplication is granted a higher precedence than addition, and it has been this way since the introduction of modern algebraic notation. Thus, the expression &lt;code&gt;2 + 3 × 4&lt;/code&gt; is interpreted to have the value &lt;code&gt;2 + (3 × 4) = 14&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
Skript: Operatoren mit höherer Priorität werden zuerst ausgewertet
&lt;/p&gt;


&lt;p&gt;
The &lt;b&gt;associativity&lt;/b&gt; of an operator is a property that determines how operators of the same precedence are grouped in the absence of parentheses. If an operand is both preceded and followed by operators, and those operators have equal precedence, then the operand may be used as input to two different operations (i.e. the two operations indicated by the two operators). The choice of which operations to apply the operand to, is determined by the &lt;i&gt;"associativity"&lt;/i&gt; of the operators.
&lt;/p&gt;

&lt;p&gt;
Operators may be &lt;b&gt;associative&lt;/b&gt; (meaning the operations can be grouped arbitrarily), &lt;b&gt;left-associative&lt;/b&gt; (meaning the operations are grouped from the left), &lt;b&gt;right-associative&lt;/b&gt; (meaning the operations are grouped from the right) or &lt;b&gt;non-associative&lt;/b&gt; (meaning operations cannot be chained, often because the output type is incompatible with the input types).
&lt;/p&gt;

&lt;p&gt;
The associativity and precedence of an operator is a part of the definition of the programming language; different programming languages may have different associativity and precedence for the same type of operator.
&lt;/p&gt;

&lt;p&gt;
Consider the expression &lt;code&gt;a ~ b ~ c&lt;/code&gt;. If the operator &lt;code&gt;~&lt;/code&gt; has left associativity, this expression would be interpreted as &lt;code&gt;(a ~ b) ~ c&lt;/code&gt;. If the operator has right associativity, the expression would be interpreted as &lt;code&gt;a ~ (b ~ c)&lt;/code&gt;. If the operator is non-associative, the expression might be a syntax error, or it might have some special meaning. 
&lt;/p&gt;

&lt;p&gt;
Some mathematical operators have inherent associativity. For example, subtraction and division, as used in conventional math notation, are inherently left-associative. Addition and multiplication, by contrast, are both left and right associative eg &lt;code&gt;(a * b) * c = a * (b * c))&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Skript: Assoziativität bestimmt die Richtung der Auswertung
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/Operators_in_C_and_C++#Compound_assignment_operators"&gt;Wiki C Precedence / Associativity Table&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Table and notes below from &lt;a href="https://en.cppreference.com/w/c/language/operator_precedence"&gt;cppreference.com&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/c-table.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
When parsing an expression, an operator which is listed on some row will be bound tighter (as if by parentheses) to its arguments than any operator that is listed on a row further below it. For example, the expression &lt;code&gt;*p++&lt;/code&gt; is parsed as &lt;code&gt;*(p++)&lt;/code&gt;, and not as &lt;code&gt;(*p)++&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Operators that are in the same cell (there may be several rows of operators listed in a cell) are evaluated with the same precedence, in the given direction. For example, the expression &lt;code&gt;a=b=c&lt;/code&gt; is parsed as &lt;code&gt;a=(b=c)&lt;/code&gt;, and not as &lt;code&gt;(a=b)=c&lt;/code&gt; because of &lt;i&gt;right-to-left associativity&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
Precedence and associativity are independent from order of evaluation.
&lt;/p&gt;

&lt;p&gt;
The C language standard doesn't specify operator precedence. It specifies the language grammar, and the precedence table is derived from it to simplify understanding. There is a part of the grammar that cannot be represented by a precedence table: an assignment-expression is not allowed as the right hand operand of a conditional operator, so &lt;code&gt;e = a &amp;lt; d ? a++ : a = d&lt;/code&gt; is an expression that cannot be parsed, and therefore relative precedence of conditional and assignment operators cannot be described easily.
&lt;/p&gt;

&lt;p&gt;
However, many C compilers use non-standard expression grammar where &lt;code&gt;?:&lt;/code&gt; is designated higher precedence than &lt;code&gt;=&lt;/code&gt;, which parses that expression as &lt;code&gt;e = ( ((a &amp;lt; d) ? (a++) : a) = d )&lt;/code&gt;, which then fails to compile due to semantic constraints: &lt;code&gt;?:&lt;/code&gt; is never lvalue and &lt;code&gt;=&lt;/code&gt; requires a modifiable lvalue on the left. This is the table presented on this page.
&lt;/p&gt;

&lt;p&gt;
Note that this is different in C++, where the conditional operator has the same precedence as assignment.
&lt;/p&gt;

&lt;p&gt;
Associativity specification is redundant for unary operators and is only shown for completeness: &lt;i&gt;unary prefix&lt;/i&gt; operators always associate right-to-left eg &lt;code&gt;sizeof ++*p&lt;/code&gt; is
 &lt;code&gt;sizeof(++(*p))&lt;/code&gt; and &lt;i&gt;unary postfix&lt;/i&gt; operators always associate left-to-right
 eg &lt;code&gt;a[1][2]++&lt;/code&gt; is &lt;code&gt;((a[1])[2])++&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
Note that the associativity is meaningful for member access operators, even though they are grouped with unary postfix operators: &lt;code&gt;a.b++&lt;/code&gt; is parsed &lt;code&gt;(a.b)++&lt;/code&gt; and not &lt;code&gt;a.(b++)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Remeber when in doubt use parentheses as it improves readability as well!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgae52c08" class="outline-2"&gt;
&lt;h2 id="orgae52c08"&gt;Abstract Machines (Automaten)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgae52c08"&gt;
&lt;p&gt;
The next part of the chapter dealt with abstract machines. The slides are hard to convert to a blog format and it did not seem to be important for the course so I'll just skip over some stuff here. You should still take a look &lt;a href="https://osg.informatik.tu-chemnitz.de/lehre/aup/aup-06-Logik-handout_de.pdf"&gt;here&lt;/a&gt; (lecture slides 06: slide 40).
&lt;/p&gt;

&lt;p&gt;
A finite-state machine (FSM) or finite-state automaton (FSA, plural: automata), finite automaton, or simply a state machine, is a mathematical model of computation. It is an abstract machine that can be in exactly one of a finite number of states at any given time. The FSM can change from one state to another in response to some external inputs; the change from one state to another is called a transition. An FSM is defined by a list of its states, its initial state, and the conditions for each transition. Finite state machines are of two types – deterministic finite state machines and non-deterministic finite state machines. A deterministic finite-state machine can be constructed equivalent to any non-deterministic one.
&lt;/p&gt;

&lt;p&gt;
Slides: Ein endlicher (deterministischer) Automat (EA, Zustandsmaschine, finite state machine ➡ FSM, auch: finite state automata) ist ein Modell zur Beschreibung von Abläufen (z.B. in Computern). Ein EA besteht aus einer Menge von &lt;i&gt;Zuständen&lt;/i&gt; S (states) und &lt;i&gt;Zustandsübergängen&lt;/i&gt; T : S × Γ → S (Transitionen, transitions). Ein EA startet in einem &lt;i&gt;Startzustand&lt;/i&gt;. Er „verarbeitet“ eine Sequenz von &lt;i&gt;Zeichen&lt;/i&gt; oder &lt;i&gt;Ereignissen&lt;/i&gt; Γ. Dabei bestimmt das nächste Zeichen/Ereignis, in welchen Zustand der EA wechselt. Ein EA kann einen oder mehrere &lt;i&gt;Endzustände&lt;/i&gt; (accepting states) besitzen. Wird ein solcher Zustand erreicht, ist die Abarbeitung beendet.
&lt;/p&gt;

&lt;p&gt;
Transitions (Zustandsveränderungen) in a state machine (endlichem Automaten) can lead to &lt;i&gt;actions&lt;/i&gt; or &lt;i&gt;output&lt;/i&gt;.
Transducers (Transduktor, ein spezieller endlicher Automat der im Ggsatz zu einem Akzeptor eine Ausgabe erzeugt, überführt/übersetzt eine Quellsprache in eine Zielsprache) generate output based on a given input and/or a state using actions. They are used for control applications and in the field of computational linguistics.
&lt;/p&gt;

&lt;p&gt;
In control applications, two types are distinguished:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Moore machine&lt;/b&gt;:
&lt;/p&gt;

&lt;p&gt;
The FSM uses only entry actions, i.e., output depends only on the state. The advantage of the Moore model is a simplification of the behaviour. Consider an elevator door. The state machine recognizes two commands: "command&lt;sub&gt;open&lt;/sub&gt;" and "command&lt;sub&gt;close&lt;/sub&gt;", which trigger state changes. The entry action (E:) in state "Opening" starts a motor opening the door, the entry action in state "Closing" starts a motor in the other direction closing the door. States "Opened" and "Closed" stop the motor when fully opened or closed. They signal to the outside world (e.g., to other state machines) the situation: "door is open" or "door is closed". Slides: Aktion/Ausgabe ist an die Ankunft in einem bestimmten Zustand gebunden
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/moore.png" alt="nil"&gt;
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;Mealy machine&lt;/b&gt;:
&lt;/p&gt;

&lt;p&gt;
The FSM also uses input actions, i.e., output depends on input and state. The use of a Mealy FSM leads often to a reduction of the number of states. The example in the picture below shows a Mealy FSM implementing the same behaviour as in the Moore example (the behaviour depends on the implemented FSM execution model and will work, e.g., for virtual FSM but not for event-driven FSM). There are two input actions (I:): "start motor to close the door if command&lt;sub&gt;close&lt;/sub&gt; arrives" and "start motor in the other direction to open the door if command&lt;sub&gt;open&lt;/sub&gt; arrives". The "opening" and "closing" intermediate states are not shown. Slides: Aktion/Ausgabe ist an einen bestimmten Übergang gebunden
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://schoettkr.github.io/knowledge-database/images/mealy.png" alt="nil"&gt;
&lt;/p&gt;



&lt;p&gt;
Finite state machines are closely related to regular grammars because to every regular grammar there exists at least one FSM which accepts all expressions of that language (slides: Jede Folge von zulässigen Eingabesymbolen bzw. -ereignissen, die in einen Endzustand führen, entspricht einer formalen Sprache, die durch eine reguläre Grammatik beschrieben werden kann).
&lt;/p&gt;

&lt;p&gt;
However a FSM is not sufficient for context free languages.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>A&amp;P</category><category>university</category><guid>https://schoettkr.github.io/knowledge-database/posts/algos_and_programming/algos-and-prog-12/</guid><pubDate>Thu, 15 Nov 2018 23:00:00 GMT</pubDate></item></channel></rss>