<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uni on schoettkr</title>
    <link>https://schoettkr.github.io/knowledge-database/tags/uni/</link>
    <description>Recent content in Uni on schoettkr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Apr 2019 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://schoettkr.github.io/knowledge-database/tags/uni/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Artificial Intelligence - Lecture 01</title>
      <link>https://schoettkr.github.io/knowledge-database/uni/dbw/01_lecture/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://schoettkr.github.io/knowledge-database/uni/dbw/01_lecture/</guid>
      <description>Not much to write about this lecture since it was mostly an introduction and generic overview of the field. The lecturant was also half an hour late so that didn&amp;rsquo;t help either. There won&amp;rsquo;t be posts about this course if the input does not increase :P</description>
    </item>
    
    <item>
      <title>Datastructures - Lecture 02</title>
      <link>https://schoettkr.github.io/knowledge-database/uni/ds/02_lecture/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://schoettkr.github.io/knowledge-database/uni/ds/02_lecture/</guid>
      <description>Continuing the repetition of some Algorithm lectures we went over pointers again.
int* pi; // pointer to int value (undefined) char** ppc; // pointer to char pointer (= pointer that points to a pointer pointing to a char :D) int i = 1; pi = &amp;amp;i; // assign address of i to pi int x = 1, y; int* px = &amp;amp;x; // pointer to x int** ppx = &amp;amp;px; // pointer to pointer of x **ppx = *px + 1; // double deferencing via &#39;**&#39;, equals x = x + 1 y = **ppx + 2; // double deferencing via &#39;**&#39;, equals y = x + 2  Now onto some new stuff!</description>
    </item>
    
    <item>
      <title>Computer Science II - Lecture 01</title>
      <link>https://schoettkr.github.io/knowledge-database/uni/cs2/01-lecture/</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://schoettkr.github.io/knowledge-database/uni/cs2/01-lecture/</guid>
      <description>Computer Science II basically continues where CS I left off. Both lectures are based on a script that is split into two parts. These weeks lecture introduced pointers. Therefore I&amp;rsquo;ll keep it short because there already a lot of posts for lectures regarding pointers on this page :) and at this point is not really a new or special topic.
Pointers Every variable has a memory adress. In case of arrays the base adress of the variable points to the beginning of an array eg the &amp;amp;a is the same adress as &amp;amp;a[0].</description>
    </item>
    
    <item>
      <title>Datastructures - Lecture 01</title>
      <link>https://schoettkr.github.io/knowledge-database/uni/ds/01_lecture/</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://schoettkr.github.io/knowledge-database/uni/ds/01_lecture/</guid>
      <description>In the first lectures of the datastructures we&amp;rsquo;ll repeat a few things that were already covered in the Algorithm &amp;amp; Programming Lecture so you may want to refer those blog posts as well. After all both courses belong to the same module.
Computational Effort &amp;amp; Complexity To compare datastructures and algorithms in regards to efficiency we need a way to measure the &amp;ldquo;cost&amp;rdquo; / computational effort. This is done by counting the required computing &amp;ldquo;steps&amp;rdquo; (Rechenschritte).</description>
    </item>
    
    <item>
      <title>Computer Networks - Lecture 01</title>
      <link>https://schoettkr.github.io/knowledge-database/uni/cn/01_lecture/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://schoettkr.github.io/knowledge-database/uni/cn/01_lecture/</guid>
      <description>This was the first lecture in the new summer semester and therefore it was mostly about organizational stuff. Here are the most important points:
 the exam is gonna be a written one and might be open-book the start of the tutorials will be announced on the course website sometime in April (registration via opal) there are gonna be exercises to hand in  those can be found here  the main programming language used will be python  Fundamental literature:</description>
    </item>
    
    <item>
      <title>Security of Distributed Software - Lecture 01</title>
      <link>https://schoettkr.github.io/knowledge-database/uni/sds/01_lecture/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://schoettkr.github.io/knowledge-database/uni/sds/01_lecture/</guid>
      <description>This was the first lecture in the new summer semester and therefore it was mostly about organizational stuff. Here are the most important points:
 the exam is gonna be a written one and might be open-book the start of the tutorials will be announced on the course website sometime in April (registration via opal) there are gonna be exercises to hand in  those can be found here   </description>
    </item>
    
    <item>
      <title>Course Information Summer 19</title>
      <link>https://schoettkr.github.io/knowledge-database/uni/org/sose19/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://schoettkr.github.io/knowledge-database/uni/org/sose19/</guid>
      <description>Dates Okay so the new semester started (01.04.19). Here&amp;rsquo;s an overview of the most important stuff:
Start Lecture Period: 01.04.2019 End Lecture Period: 12.07.2019
Beginn of central examination period: 15.07.2019 End of central examination period: 10.08.2019
Re-matriculation Period: 03.06. - 13.09.2019
Courses and related links  Datastructures  Material PVL: at least 50% of homework correct and handed in here Exam type: written  Operating Systems  Course Homepage Tutorial Page Exam type: written  Artificial Intelligence  Course Homepage Exam type: written  Security of Distributed Software  Course Homepage Tutorial Page Exam type: written (might be open-book)  Media Encoding  Course Homepage Exam type: written  Databases &amp;amp; Webtechnology  Material Exam type: project until 23.</description>
    </item>
    
  </channel>
</rss>